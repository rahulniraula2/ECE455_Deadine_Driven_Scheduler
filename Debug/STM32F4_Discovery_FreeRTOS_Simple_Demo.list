
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004f1c  08004f1c  00014f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  08004f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00007c4c  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20007cc8  20007cc8  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ee2d  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025a7  00000000  00000000  0002eed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ae8  00000000  00000000  00031480  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009b0  00000000  00000000  00031f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000056e3  00000000  00000000  00032918  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003fe3  00000000  00000000  00037ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003bfde  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000313c  00000000  00000000  0003c05c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f00 	.word	0x08004f00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004f00 	.word	0x08004f00

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	200078b8 	.word	0x200078b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000098 	.word	0x20000098
 8000530:	2000009c 	.word	0x2000009c
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 fcd2 	bl	8001fc8 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	200078b8 	.word	0x200078b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 fbee 	bl	8001e50 <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000014 	.word	0x20000014
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000098 	.word	0x20000098
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	2000009c 	.word	0x2000009c

08000760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800076c:	f001 fab6 	bl	8001cdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000770:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <pvPortMalloc+0x178>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000778:	f000 f91c 	bl	80009b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <pvPortMalloc+0x17c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4013      	ands	r3, r2
 8000784:	2b00      	cmp	r3, #0
 8000786:	f040 808c 	bne.w	80008a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01c      	beq.n	80007ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000790:	2208      	movs	r2, #8
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d013      	beq.n	80007ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f023 0307 	bic.w	r3, r3, #7
 80007a8:	3308      	adds	r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <pvPortMalloc+0x6a>
 80007b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	f3bf 8f4f 	dsb	sy
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e7fe      	b.n	80007c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d068      	beq.n	80008a2 <pvPortMalloc+0x142>
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <pvPortMalloc+0x180>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d863      	bhi.n	80008a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007da:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <pvPortMalloc+0x184>)
 80007dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <pvPortMalloc+0x184>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007e4:	e004      	b.n	80007f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d203      	bcs.n	8000802 <pvPortMalloc+0xa2>
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f1      	bne.n	80007e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <pvPortMalloc+0x178>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000808:	429a      	cmp	r2, r3
 800080a:	d04a      	beq.n	80008a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2208      	movs	r2, #8
 8000812:	4413      	add	r3, r2
 8000814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1ad2      	subs	r2, r2, r3
 8000826:	2308      	movs	r3, #8
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	429a      	cmp	r2, r3
 800082c:	d91e      	bls.n	800086c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800082e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	2b00      	cmp	r3, #0
 800083e:	d009      	beq.n	8000854 <pvPortMalloc+0xf4>
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	e7fe      	b.n	8000852 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f000 f906 	bl	8000a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <pvPortMalloc+0x180>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <pvPortMalloc+0x180>)
 8000878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <pvPortMalloc+0x180>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <pvPortMalloc+0x188>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d203      	bcs.n	800088e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <pvPortMalloc+0x180>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <pvPortMalloc+0x188>)
 800088c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <pvPortMalloc+0x17c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008a2:	f001 fa29 	bl	8001cf8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80008ac:	f003 f952 	bl	8003b54 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d009      	beq.n	80008ce <pvPortMalloc+0x16e>
 80008ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008be:	f383 8811 	msr	BASEPRI, r3
 80008c2:	f3bf 8f6f 	isb	sy
 80008c6:	f3bf 8f4f 	dsb	sy
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	e7fe      	b.n	80008cc <pvPortMalloc+0x16c>
	return pvReturn;
 80008ce:	69fb      	ldr	r3, [r7, #28]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200078a8 	.word	0x200078a8
 80008dc:	200078b4 	.word	0x200078b4
 80008e0:	200078ac 	.word	0x200078ac
 80008e4:	200078a0 	.word	0x200078a0
 80008e8:	200078b0 	.word	0x200078b0

080008ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d046      	beq.n	800098c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008fe:	2308      	movs	r3, #8
 8000900:	425b      	negs	r3, r3
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4413      	add	r3, r2
 8000906:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <vPortFree+0xa8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <vPortFree+0x42>
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e7fe      	b.n	800092c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d009      	beq.n	800094a <vPortFree+0x5e>
 8000936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e7fe      	b.n	8000948 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <vPortFree+0xa8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4013      	ands	r3, r2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d019      	beq.n	800098c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d115      	bne.n	800098c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <vPortFree+0xa8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	43db      	mvns	r3, r3
 800096a:	401a      	ands	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000970:	f001 f9b4 	bl	8001cdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <vPortFree+0xac>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4413      	add	r3, r2
 800097e:	4a06      	ldr	r2, [pc, #24]	; (8000998 <vPortFree+0xac>)
 8000980:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000982:	6938      	ldr	r0, [r7, #16]
 8000984:	f000 f878 	bl	8000a78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000988:	f001 f9b6 	bl	8001cf8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200078b4 	.word	0x200078b4
 8000998:	200078ac 	.word	0x200078ac

0800099c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <xPortGetFreeHeapSize+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	200078ac 	.word	0x200078ac

080009b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009ba:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80009be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <prvHeapInit+0xac>)
 80009c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00c      	beq.n	80009e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3307      	adds	r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f023 0307 	bic.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <prvHeapInit+0xac>)
 80009e4:	4413      	add	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <prvHeapInit+0xb0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <prvHeapInit+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a00:	2208      	movs	r2, #8
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f023 0307 	bic.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <prvHeapInit+0xb4>)
 8000a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <prvHeapInit+0xb4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <prvHeapInit+0xb4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <prvHeapInit+0xb4>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <prvHeapInit+0xb8>)
 8000a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <prvHeapInit+0xbc>)
 8000a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <prvHeapInit+0xc0>)
 8000a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	200000a0 	.word	0x200000a0
 8000a64:	200078a0 	.word	0x200078a0
 8000a68:	200078a8 	.word	0x200078a8
 8000a6c:	200078b0 	.word	0x200078b0
 8000a70:	200078ac 	.word	0x200078ac
 8000a74:	200078b4 	.word	0x200078b4

08000a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <prvInsertBlockIntoFreeList+0xac>)
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <prvInsertBlockIntoFreeList+0x14>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f7      	bcc.n	8000a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d108      	bne.n	8000aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	441a      	add	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d118      	bne.n	8000b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d00d      	beq.n	8000af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e008      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e003      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d002      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200078a0 	.word	0x200078a0
 8000b28:	200078a8 	.word	0x200078a8

08000b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <xQueueGenericReset+0x28>
 8000b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	e7fe      	b.n	8000b52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000b54:	f7ff fcf4 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2200      	movs	r2, #0
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b84:	3b01      	subs	r3, #1
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b8a:	fb01 f303 	mul.w	r3, r1, r3
 8000b8e:	441a      	add	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d114      	bne.n	8000bd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01a      	beq.n	8000be8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fad4 	bl	8002164 <xTaskRemoveFromEventList>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d012      	beq.n	8000be8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <xQueueGenericReset+0xcc>)
 8000bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	f3bf 8f4f 	dsb	sy
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	e009      	b.n	8000be8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3310      	adds	r3, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff faf9 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3324      	adds	r3, #36	; 0x24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff faf4 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000be8:	f7ff fcd8 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000ed04 	.word	0xe000ed04

08000bfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <xQueueGenericCreate+0x28>
 8000c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c14:	f383 8811 	msr	BASEPRI, r3
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e7fe      	b.n	8000c22 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e004      	b.n	8000c3a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3348      	adds	r3, #72	; 0x48
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd8e 	bl	8000760 <pvPortMalloc>
 8000c44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3348      	adds	r3, #72	; 0x48
 8000c50:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 f805 	bl	8000c6e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000c64:	69bb      	ldr	r3, [r7, #24]
	}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e002      	b.n	8000c90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	69b8      	ldr	r0, [r7, #24]
 8000ca0:	f7ff ff44 	bl	8000b2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d109      	bne.n	8000cdc <xQueueGenericSend+0x30>
 8000cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cda:	e7fe      	b.n	8000cda <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d103      	bne.n	8000cea <xQueueGenericSend+0x3e>
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <xQueueGenericSend+0x42>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <xQueueGenericSend+0x44>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <xQueueGenericSend+0x5c>
 8000cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf8:	f383 8811 	msr	BASEPRI, r3
 8000cfc:	f3bf 8f6f 	isb	sy
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
 8000d06:	e7fe      	b.n	8000d06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d103      	bne.n	8000d16 <xQueueGenericSend+0x6a>
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <xQueueGenericSend+0x6e>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <xQueueGenericSend+0x70>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <xQueueGenericSend+0x88>
 8000d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d24:	f383 8811 	msr	BASEPRI, r3
 8000d28:	f3bf 8f6f 	isb	sy
 8000d2c:	f3bf 8f4f 	dsb	sy
 8000d30:	623b      	str	r3, [r7, #32]
 8000d32:	e7fe      	b.n	8000d32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d34:	f001 fbe2 	bl	80024fc <xTaskGetSchedulerState>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <xQueueGenericSend+0x98>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <xQueueGenericSend+0x9c>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <xQueueGenericSend+0x9e>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <xQueueGenericSend+0xb6>
 8000d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d52:	f383 8811 	msr	BASEPRI, r3
 8000d56:	f3bf 8f6f 	isb	sy
 8000d5a:	f3bf 8f4f 	dsb	sy
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e7fe      	b.n	8000d60 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d62:	f7ff fbed 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d302      	bcc.n	8000d78 <xQueueGenericSend+0xcc>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d129      	bne.n	8000dcc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d7e:	f000 fa35 	bl	80011ec <prvCopyDataToQueue>
 8000d82:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d010      	beq.n	8000dae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8e:	3324      	adds	r3, #36	; 0x24
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 f9e7 	bl	8002164 <xTaskRemoveFromEventList>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d9c:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	e00a      	b.n	8000dc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	f3bf 8f4f 	dsb	sy
 8000dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000dc4:	f7ff fbea 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e063      	b.n	8000e94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dd2:	f7ff fbe3 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e05c      	b.n	8000e94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d106      	bne.n	8000dee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fa1f 	bl	8002228 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000dee:	f7ff fbd5 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000df2:	f000 ff73 	bl	8001cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000df6:	f7ff fba3 	bl	8000540 <vPortEnterCritical>
 8000dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e06:	d103      	bne.n	8000e10 <xQueueGenericSend+0x164>
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d103      	bne.n	8000e26 <xQueueGenericSend+0x17a>
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e26:	f7ff fbb9 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fa1c 	bl	8002270 <xTaskCheckForTimeOut>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d124      	bne.n	8000e88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e40:	f000 facc 	bl	80013dc <prvIsQueueFull>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d018      	beq.n	8000e7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4c:	3310      	adds	r3, #16
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 f938 	bl	80020c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e5a:	f000 fa57 	bl	800130c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e5e:	f000 ff4b 	bl	8001cf8 <xTaskResumeAll>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f47f af7c 	bne.w	8000d62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	f3bf 8f4f 	dsb	sy
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	e772      	b.n	8000d62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e7e:	f000 fa45 	bl	800130c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e82:	f000 ff39 	bl	8001cf8 <xTaskResumeAll>
 8000e86:	e76c      	b.n	8000d62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e8a:	f000 fa3f 	bl	800130c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e8e:	f000 ff33 	bl	8001cf8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e92:	2300      	movs	r3, #0
		}
	}
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3738      	adds	r7, #56	; 0x38
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000ed04 	.word	0xe000ed04

08000ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <xQueueGenericSendFromISR+0x2c>
 8000eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebc:	f383 8811 	msr	BASEPRI, r3
 8000ec0:	f3bf 8f6f 	isb	sy
 8000ec4:	f3bf 8f4f 	dsb	sy
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	e7fe      	b.n	8000eca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <xQueueGenericSendFromISR+0x3a>
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <xQueueGenericSendFromISR+0x3e>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <xQueueGenericSendFromISR+0x40>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <xQueueGenericSendFromISR+0x58>
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	e7fe      	b.n	8000ef6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d103      	bne.n	8000f06 <xQueueGenericSendFromISR+0x66>
 8000efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <xQueueGenericSendFromISR+0x6a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <xQueueGenericSendFromISR+0x6c>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <xQueueGenericSendFromISR+0x84>
 8000f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f14:	f383 8811 	msr	BASEPRI, r3
 8000f18:	f3bf 8f6f 	isb	sy
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e7fe      	b.n	8000f22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f24:	f7ff fbde 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000f28:	f3ef 8211 	mrs	r2, BASEPRI
 8000f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f30:	f383 8811 	msr	BASEPRI, r3
 8000f34:	f3bf 8f6f 	isb	sy
 8000f38:	f3bf 8f4f 	dsb	sy
 8000f3c:	61ba      	str	r2, [r7, #24]
 8000f3e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000f40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d302      	bcc.n	8000f56 <xQueueGenericSendFromISR+0xb6>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d12c      	bne.n	8000fb0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f66:	f000 f941 	bl	80011ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f72:	d112      	bne.n	8000f9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d016      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	3324      	adds	r3, #36	; 0x24
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 f8ef 	bl	8002164 <xTaskRemoveFromEventList>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00e      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e007      	b.n	8000faa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000faa:	2301      	movs	r3, #1
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000fae:	e001      	b.n	8000fb4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3738      	adds	r7, #56	; 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <xQueueGenericReceive+0x30>
	__asm volatile
 8000fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e7fe      	b.n	8000ff6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <xQueueGenericReceive+0x3e>
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <xQueueGenericReceive+0x42>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <xQueueGenericReceive+0x44>
 800100a:	2300      	movs	r3, #0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d109      	bne.n	8001024 <xQueueGenericReceive+0x5c>
 8001010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	623b      	str	r3, [r7, #32]
 8001022:	e7fe      	b.n	8001022 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001024:	f001 fa6a 	bl	80024fc <xTaskGetSchedulerState>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <xQueueGenericReceive+0x6c>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <xQueueGenericReceive+0x70>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <xQueueGenericReceive+0x72>
 8001038:	2300      	movs	r3, #0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <xQueueGenericReceive+0x8a>
 800103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	e7fe      	b.n	8001050 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001052:	f7ff fa75 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d046      	beq.n	80010f0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800106c:	f000 f928 	bl	80012c0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d121      	bne.n	80010ba <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	1e5a      	subs	r2, r3, #1
 800107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d104      	bne.n	8001090 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001086:	f001 fb51 	bl	800272c <pvTaskIncrementMutexHeldCount>
 800108a:	4602      	mov	r2, r0
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d027      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109a:	3310      	adds	r3, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f001 f861 	bl	8002164 <xTaskRemoveFromEventList>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f3bf 8f4f 	dsb	sy
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	e016      	b.n	80010e8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010be:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ca:	3324      	adds	r3, #36	; 0x24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f849 	bl	8002164 <xTaskRemoveFromEventList>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80010e8:	f7ff fa58 	bl	800059c <vPortExitCritical>
				return pdPASS;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e077      	b.n	80011e0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80010f6:	f7ff fa51 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e070      	b.n	80011e0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4618      	mov	r0, r3
 800110a:	f001 f88d 	bl	8002228 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800110e:	2301      	movs	r3, #1
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001112:	f7ff fa43 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001116:	f000 fde1 	bl	8001cdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800111a:	f7ff fa11 	bl	8000540 <vPortEnterCritical>
 800111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001124:	b25b      	sxtb	r3, r3
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112a:	d103      	bne.n	8001134 <xQueueGenericReceive+0x16c>
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800113a:	b25b      	sxtb	r3, r3
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d103      	bne.n	800114a <xQueueGenericReceive+0x182>
 8001142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800114a:	f7ff fa27 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f001 f88a 	bl	8002270 <xTaskCheckForTimeOut>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d131      	bne.n	80011c6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001164:	f000 f924 	bl	80013b0 <prvIsQueueEmpty>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d025      	beq.n	80011ba <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d108      	bne.n	8001188 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8001176:	f7ff f9e3 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f9da 	bl	8002538 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001184:	f7ff fa0a 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	3324      	adds	r3, #36	; 0x24
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 ff99 	bl	80020c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001198:	f000 f8b8 	bl	800130c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800119c:	f000 fdac 	bl	8001cf8 <xTaskResumeAll>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f af55 	bne.w	8001052 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <xQueueGenericReceive+0x220>)
 80011aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	e74b      	b.n	8001052 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011bc:	f000 f8a6 	bl	800130c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011c0:	f000 fd9a 	bl	8001cf8 <xTaskResumeAll>
 80011c4:	e745      	b.n	8001052 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80011c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c8:	f000 f8a0 	bl	800130c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011cc:	f000 fd94 	bl	8001cf8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011d2:	f000 f8ed 	bl	80013b0 <prvIsQueueEmpty>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f43f af3a 	beq.w	8001052 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80011de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3738      	adds	r7, #56	; 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	e000ed04 	.word	0xe000ed04

080011ec <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10d      	bne.n	8001226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d14d      	bne.n	80012ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4618      	mov	r0, r3
 8001218:	f001 fa04 	bl	8002624 <xTaskPriorityDisinherit>
 800121c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	e043      	b.n	80012ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d119      	bne.n	8001260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	461a      	mov	r2, r3
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	f003 f8aa 	bl	8004390 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	441a      	add	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d32b      	bcc.n	80012ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	e026      	b.n	80012ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	461a      	mov	r2, r3
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	f003 f890 	bl	8004390 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	425b      	negs	r3, r3
 800127a:	441a      	add	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	425b      	negs	r3, r3
 8001296:	441a      	add	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d105      	bne.n	80012ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012b6:	697b      	ldr	r3, [r7, #20]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d018      	beq.n	8001304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	441a      	add	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d303      	bcc.n	80012f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68d9      	ldr	r1, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	461a      	mov	r2, r3
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f003 f846 	bl	8004390 <memcpy>
	}
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001314:	f7ff f914 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800131e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001320:	e011      	b.n	8001346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	2b00      	cmp	r3, #0
 8001328:	d012      	beq.n	8001350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3324      	adds	r3, #36	; 0x24
 800132e:	4618      	mov	r0, r3
 8001330:	f000 ff18 	bl	8002164 <xTaskRemoveFromEventList>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800133a:	f000 fff7 	bl	800232c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3b01      	subs	r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dce9      	bgt.n	8001322 <prvUnlockQueue+0x16>
 800134e:	e000      	b.n	8001352 <prvUnlockQueue+0x46>
					break;
 8001350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800135a:	f7ff f91f 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800135e:	f7ff f8ef 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800136a:	e011      	b.n	8001390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d012      	beq.n	800139a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3310      	adds	r3, #16
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fef3 	bl	8002164 <xTaskRemoveFromEventList>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001384:	f000 ffd2 	bl	800232c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	3b01      	subs	r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dce9      	bgt.n	800136c <prvUnlockQueue+0x60>
 8001398:	e000      	b.n	800139c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800139a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013a4:	f7ff f8fa 	bl	800059c <vPortExitCritical>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013b8:	f7ff f8c2 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e001      	b.n	80013ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013ce:	f7ff f8e5 	bl	800059c <vPortExitCritical>

	return xReturn;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013e4:	f7ff f8ac 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d102      	bne.n	80013fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e001      	b.n	80013fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013fe:	f7ff f8cd 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e014      	b.n	8001446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <vQueueAddToRegistry+0x4c>)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10b      	bne.n	8001440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001428:	490b      	ldr	r1, [pc, #44]	; (8001458 <vQueueAddToRegistry+0x4c>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <vQueueAddToRegistry+0x4c>)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800143e:	e005      	b.n	800144c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b07      	cmp	r3, #7
 800144a:	d9e7      	bls.n	800141c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	20007bf8 	.word	0x20007bf8

0800145c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800146c:	f7ff f868 	bl	8000540 <vPortEnterCritical>
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d103      	bne.n	8001486 <vQueueWaitForMessageRestricted+0x2a>
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800148c:	b25b      	sxtb	r3, r3
 800148e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001492:	d103      	bne.n	800149c <vQueueWaitForMessageRestricted+0x40>
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800149c:	f7ff f87e 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d106      	bne.n	80014b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3324      	adds	r3, #36	; 0x24
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fe2d 	bl	8002110 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff28 	bl	800130c <prvUnlockQueue>
	}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f941 	bl	8000760 <pvPortMalloc>
 80014de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00e      	beq.n	8001504 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80014e6:	2050      	movs	r0, #80	; 0x50
 80014e8:	f7ff f93a 	bl	8000760 <pvPortMalloc>
 80014ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
 80014fa:	e005      	b.n	8001508 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f7ff f9f5 	bl	80008ec <vPortFree>
 8001502:	e001      	b.n	8001508 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d013      	beq.n	8001536 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800150e:	88fa      	ldrh	r2, [r7, #6]
 8001510:	2300      	movs	r3, #0
 8001512:	9303      	str	r3, [sp, #12]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 f80e 	bl	8001546 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800152a:	69f8      	ldr	r0, [r7, #28]
 800152c:	f000 f892 	bl	8001654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e002      	b.n	800153c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800153c:	69bb      	ldr	r3, [r7, #24]
	}
 800153e:	4618      	mov	r0, r3
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b088      	sub	sp, #32
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001556:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	461a      	mov	r2, r3
 800155e:	21a5      	movs	r1, #165	; 0xa5
 8001560:	f002 ff21 	bl	80043a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800156e:	3b01      	subs	r3, #1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f023 0307 	bic.w	r3, r3, #7
 800157c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <prvInitialiseNewTask+0x56>
 8001588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158c:	f383 8811 	msr	BASEPRI, r3
 8001590:	f3bf 8f6f 	isb	sy
 8001594:	f3bf 8f4f 	dsb	sy
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e7fe      	b.n	800159a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	e012      	b.n	80015c8 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	7819      	ldrb	r1, [r3, #0]
 80015aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	3334      	adds	r3, #52	; 0x34
 80015b2:	460a      	mov	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b09      	cmp	r3, #9
 80015cc:	d9e9      	bls.n	80015a2 <prvInitialiseNewTask+0x5c>
 80015ce:	e000      	b.n	80015d2 <prvInitialiseNewTask+0x8c>
		{
			break;
 80015d0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	2b1d      	cmp	r3, #29
 80015de:	d901      	bls.n	80015e4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015e0:	231d      	movs	r3, #29
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80015ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80015f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f2:	2200      	movs	r2, #0
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	3304      	adds	r3, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fe08 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001602:	3318      	adds	r3, #24
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fe03 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	f1c3 021e 	rsb	r2, r3, #30
 8001616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001618:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	2200      	movs	r2, #0
 8001624:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	2200      	movs	r2, #0
 800162a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	69b8      	ldr	r0, [r7, #24]
 8001634:	f7fe fe80 	bl	8000338 <pxPortInitialiseStack>
 8001638:	4602      	mov	r2, r0
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800164a:	bf00      	nop
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800165c:	f7fe ff70 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	4a29      	ldr	r2, [pc, #164]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 8001668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001672:	4a27      	ldr	r2, [pc, #156]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d110      	bne.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001680:	f000 fe7a 	bl	8002378 <prvInitialiseTaskLists>
 8001684:	e00d      	b.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <prvAddNewTaskToReadyList+0xc0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	429a      	cmp	r2, r3
 800169a:	d802      	bhi.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <prvAddNewTaskToReadyList+0xc4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <prvAddNewTaskToReadyList+0xc4>)
 80016aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	2201      	movs	r2, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <prvAddNewTaskToReadyList+0xc8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	4a18      	ldr	r2, [pc, #96]	; (800171c <prvAddNewTaskToReadyList+0xc8>)
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <prvAddNewTaskToReadyList+0xcc>)
 80016cc:	441a      	add	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4610      	mov	r0, r2
 80016d6:	f7fe fda8 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016da:	f7fe ff5f 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <prvAddNewTaskToReadyList+0xc0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00e      	beq.n	8001704 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <prvAddNewTaskToReadyList+0xd0>)
 80016f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	f3bf 8f4f 	dsb	sy
 8001700:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20007b84 	.word	0x20007b84
 8001710:	200078b8 	.word	0x200078b8
 8001714:	20007b90 	.word	0x20007b90
 8001718:	20007ba0 	.word	0x20007ba0
 800171c:	20007b8c 	.word	0x20007b8c
 8001720:	200078bc 	.word	0x200078bc
 8001724:	e000ed04 	.word	0xe000ed04

08001728 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001730:	f7fe ff06 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <vTaskDelete+0x18>
 800173a:	4b38      	ldr	r3, [pc, #224]	; (800181c <vTaskDelete+0xf4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	e000      	b.n	8001742 <vTaskDelete+0x1a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	3304      	adds	r3, #4
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fdcb 	bl	80002e4 <uxListRemove>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d115      	bne.n	8001780 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001758:	4931      	ldr	r1, [pc, #196]	; (8001820 <vTaskDelete+0xf8>)
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d10a      	bne.n	8001780 <vTaskDelete+0x58>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	2201      	movs	r2, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43da      	mvns	r2, r3
 8001776:	4b2b      	ldr	r3, [pc, #172]	; (8001824 <vTaskDelete+0xfc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4013      	ands	r3, r2
 800177c:	4a29      	ldr	r2, [pc, #164]	; (8001824 <vTaskDelete+0xfc>)
 800177e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	2b00      	cmp	r3, #0
 8001786:	d004      	beq.n	8001792 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3318      	adds	r3, #24
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fda9 	bl	80002e4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <vTaskDelete+0x100>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a23      	ldr	r2, [pc, #140]	; (8001828 <vTaskDelete+0x100>)
 800179a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <vTaskDelete+0xf4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d10b      	bne.n	80017be <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3304      	adds	r3, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	481f      	ldr	r0, [pc, #124]	; (800182c <vTaskDelete+0x104>)
 80017ae:	f7fe fd3c 	bl	800022a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <vTaskDelete+0x108>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <vTaskDelete+0x108>)
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e009      	b.n	80017d2 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80017be:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <vTaskDelete+0x10c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <vTaskDelete+0x10c>)
 80017c6:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 fe51 	bl	8002470 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80017ce:	f000 fe5f 	bl	8002490 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80017d2:	f7fe fee3 	bl	800059c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <vTaskDelete+0x110>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01a      	beq.n	8001814 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <vTaskDelete+0xf4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d115      	bne.n	8001814 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <vTaskDelete+0x114>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d009      	beq.n	8001804 <vTaskDelete+0xdc>
 80017f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017f4:	f383 8811 	msr	BASEPRI, r3
 80017f8:	f3bf 8f6f 	isb	sy
 80017fc:	f3bf 8f4f 	dsb	sy
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	e7fe      	b.n	8001802 <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <vTaskDelete+0x118>)
 8001806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	f3bf 8f4f 	dsb	sy
 8001810:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200078b8 	.word	0x200078b8
 8001820:	200078bc 	.word	0x200078bc
 8001824:	20007b8c 	.word	0x20007b8c
 8001828:	20007ba0 	.word	0x20007ba0
 800182c:	20007b58 	.word	0x20007b58
 8001830:	20007b6c 	.word	0x20007b6c
 8001834:	20007b84 	.word	0x20007b84
 8001838:	20007b90 	.word	0x20007b90
 800183c:	20007bac 	.word	0x20007bac
 8001840:	e000ed04 	.word	0xe000ed04

08001844 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d016      	beq.n	8001884 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <vTaskDelay+0x60>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d009      	beq.n	8001872 <vTaskDelay+0x2e>
 800185e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001862:	f383 8811 	msr	BASEPRI, r3
 8001866:	f3bf 8f6f 	isb	sy
 800186a:	f3bf 8f4f 	dsb	sy
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	e7fe      	b.n	8001870 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001872:	f000 fa33 	bl	8001cdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001876:	2100      	movs	r1, #0
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 ff6b 	bl	8002754 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800187e:	f000 fa3b 	bl	8001cf8 <xTaskResumeAll>
 8001882:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d107      	bne.n	800189a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <vTaskDelay+0x64>)
 800188c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	f3bf 8f4f 	dsb	sy
 8001896:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20007bac 	.word	0x20007bac
 80018a8:	e000ed04 	.word	0xe000ed04

080018ac <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	2b1d      	cmp	r3, #29
 80018be:	d909      	bls.n	80018d4 <vTaskPrioritySet+0x28>
 80018c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018c4:	f383 8811 	msr	BASEPRI, r3
 80018c8:	f3bf 8f6f 	isb	sy
 80018cc:	f3bf 8f4f 	dsb	sy
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	e7fe      	b.n	80018d2 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b1d      	cmp	r3, #29
 80018d8:	d901      	bls.n	80018de <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80018da:	231d      	movs	r3, #29
 80018dc:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80018de:	f7fe fe2f 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <vTaskPrioritySet+0x42>
 80018e8:	4b43      	ldr	r3, [pc, #268]	; (80019f8 <vTaskPrioritySet+0x14c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e000      	b.n	80018f0 <vTaskPrioritySet+0x44>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d074      	beq.n	80019ea <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	429a      	cmp	r2, r3
 8001906:	d90d      	bls.n	8001924 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8001908:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <vTaskPrioritySet+0x14c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	429a      	cmp	r2, r3
 8001910:	d00f      	beq.n	8001932 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001912:	4b39      	ldr	r3, [pc, #228]	; (80019f8 <vTaskPrioritySet+0x14c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d809      	bhi.n	8001932 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 800191e:	2301      	movs	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e006      	b.n	8001932 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <vTaskPrioritySet+0x14c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	429a      	cmp	r2, r3
 800192c:	d101      	bne.n	8001932 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800192e:	2301      	movs	r3, #1
 8001930:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	429a      	cmp	r2, r3
 8001942:	d102      	bne.n	800194a <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	2b00      	cmp	r3, #0
 8001956:	db04      	blt.n	8001962 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f1c3 021e 	rsb	r2, r3, #30
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6959      	ldr	r1, [r3, #20]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4a22      	ldr	r2, [pc, #136]	; (80019fc <vTaskPrioritySet+0x150>)
 8001972:	4413      	add	r3, r2
 8001974:	4299      	cmp	r1, r3
 8001976:	d101      	bne.n	800197c <vTaskPrioritySet+0xd0>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <vTaskPrioritySet+0xd2>
 800197c:	2300      	movs	r3, #0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d028      	beq.n	80019d4 <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	3304      	adds	r3, #4
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fcac 	bl	80002e4 <uxListRemove>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d109      	bne.n	80019a6 <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8001992:	2201      	movs	r2, #1
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <vTaskPrioritySet+0x154>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4013      	ands	r3, r2
 80019a2:	4a17      	ldr	r2, [pc, #92]	; (8001a00 <vTaskPrioritySet+0x154>)
 80019a4:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	2201      	movs	r2, #1
 80019ac:	409a      	lsls	r2, r3
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <vTaskPrioritySet+0x154>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <vTaskPrioritySet+0x154>)
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <vTaskPrioritySet+0x150>)
 80019c6:	441a      	add	r2, r3
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	3304      	adds	r3, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4610      	mov	r0, r2
 80019d0:	f7fe fc2b 	bl	800022a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d007      	beq.n	80019ea <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <vTaskPrioritySet+0x158>)
 80019dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f3bf 8f4f 	dsb	sy
 80019e6:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80019ea:	f7fe fdd7 	bl	800059c <vPortExitCritical>
	}
 80019ee:	bf00      	nop
 80019f0:	3720      	adds	r7, #32
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200078b8 	.word	0x200078b8
 80019fc:	200078bc 	.word	0x200078bc
 8001a00:	20007b8c 	.word	0x20007b8c
 8001a04:	e000ed04 	.word	0xe000ed04

08001a08 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001a10:	f7fe fd96 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <vTaskSuspend+0x18>
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <vTaskSuspend+0xf0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	e000      	b.n	8001a22 <vTaskSuspend+0x1a>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3304      	adds	r3, #4
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fc5b 	bl	80002e4 <uxListRemove>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d115      	bne.n	8001a60 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a38:	4930      	ldr	r1, [pc, #192]	; (8001afc <vTaskSuspend+0xf4>)
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4413      	add	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	440b      	add	r3, r1
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10a      	bne.n	8001a60 <vTaskSuspend+0x58>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	2201      	movs	r2, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43da      	mvns	r2, r3
 8001a56:	4b2a      	ldr	r3, [pc, #168]	; (8001b00 <vTaskSuspend+0xf8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	4a28      	ldr	r2, [pc, #160]	; (8001b00 <vTaskSuspend+0xf8>)
 8001a5e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3318      	adds	r3, #24
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fc39 	bl	80002e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3304      	adds	r3, #4
 8001a76:	4619      	mov	r1, r3
 8001a78:	4822      	ldr	r0, [pc, #136]	; (8001b04 <vTaskSuspend+0xfc>)
 8001a7a:	f7fe fbd6 	bl	800022a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 8001a7e:	f7fe fd8d 	bl	800059c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <vTaskSuspend+0x100>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001a8a:	f7fe fd59 	bl	8000540 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001a8e:	f000 fcff 	bl	8002490 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001a92:	f7fe fd83 	bl	800059c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <vTaskSuspend+0xf0>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d126      	bne.n	8001aee <vTaskSuspend+0xe6>
		{
			if( xSchedulerRunning != pdFALSE )
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <vTaskSuspend+0x100>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d016      	beq.n	8001ad6 <vTaskSuspend+0xce>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <vTaskSuspend+0x104>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d009      	beq.n	8001ac4 <vTaskSuspend+0xbc>
 8001ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	e7fe      	b.n	8001ac2 <vTaskSuspend+0xba>
				portYIELD_WITHIN_API();
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <vTaskSuspend+0x108>)
 8001ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	f3bf 8f4f 	dsb	sy
 8001ad0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001ad4:	e00b      	b.n	8001aee <vTaskSuspend+0xe6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <vTaskSuspend+0xfc>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <vTaskSuspend+0x10c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d103      	bne.n	8001aea <vTaskSuspend+0xe2>
					pxCurrentTCB = NULL;
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <vTaskSuspend+0xf0>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
	}
 8001ae8:	e001      	b.n	8001aee <vTaskSuspend+0xe6>
					vTaskSwitchContext();
 8001aea:	f000 fa6d 	bl	8001fc8 <vTaskSwitchContext>
	}
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200078b8 	.word	0x200078b8
 8001afc:	200078bc 	.word	0x200078bc
 8001b00:	20007b8c 	.word	0x20007b8c
 8001b04:	20007b70 	.word	0x20007b70
 8001b08:	20007b90 	.word	0x20007b90
 8001b0c:	20007bac 	.word	0x20007bac
 8001b10:	e000ed04 	.word	0xe000ed04
 8001b14:	20007b84 	.word	0x20007b84

08001b18 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <prvTaskIsTaskSuspended+0x2a>
 8001b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b32:	f383 8811 	msr	BASEPRI, r3
 8001b36:	f3bf 8f6f 	isb	sy
 8001b3a:	f3bf 8f4f 	dsb	sy
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	e7fe      	b.n	8001b40 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <prvTaskIsTaskSuspended+0x6c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d101      	bne.n	8001b50 <prvTaskIsTaskSuspended+0x38>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <prvTaskIsTaskSuspended+0x3a>
 8001b50:	2300      	movs	r3, #0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d00f      	beq.n	8001b76 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <prvTaskIsTaskSuspended+0x70>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d00a      	beq.n	8001b76 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d101      	bne.n	8001b6c <prvTaskIsTaskSuspended+0x54>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <prvTaskIsTaskSuspended+0x56>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8001b72:	2301      	movs	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001b76:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001b78:	4618      	mov	r0, r3
 8001b7a:	371c      	adds	r7, #28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	20007b70 	.word	0x20007b70
 8001b88:	20007b44 	.word	0x20007b44

08001b8c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <vTaskResume+0x26>
 8001b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba2:	f383 8811 	msr	BASEPRI, r3
 8001ba6:	f3bf 8f6f 	isb	sy
 8001baa:	f3bf 8f4f 	dsb	sy
 8001bae:	60bb      	str	r3, [r7, #8]
 8001bb0:	e7fe      	b.n	8001bb0 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d039      	beq.n	8001c2c <vTaskResume+0xa0>
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <vTaskResume+0xa8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d034      	beq.n	8001c2c <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8001bc2:	f7fe fcbd 	bl	8000540 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff ffa6 	bl	8001b18 <prvTaskIsTaskSuspended>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d02a      	beq.n	8001c28 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fb84 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	2201      	movs	r2, #1
 8001be2:	409a      	lsls	r2, r3
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <vTaskResume+0xac>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <vTaskResume+0xac>)
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <vTaskResume+0xb0>)
 8001bfc:	441a      	add	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	3304      	adds	r3, #4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4610      	mov	r0, r2
 8001c06:	f7fe fb10 	bl	800022a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <vTaskResume+0xa8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d307      	bcc.n	8001c28 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <vTaskResume+0xb4>)
 8001c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001c28:	f7fe fcb8 	bl	800059c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200078b8 	.word	0x200078b8
 8001c38:	20007b8c 	.word	0x20007b8c
 8001c3c:	200078bc 	.word	0x200078bc
 8001c40:	e000ed04 	.word	0xe000ed04

08001c44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <vTaskStartScheduler+0x80>)
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	2300      	movs	r3, #0
 8001c54:	2282      	movs	r2, #130	; 0x82
 8001c56:	491c      	ldr	r1, [pc, #112]	; (8001cc8 <vTaskStartScheduler+0x84>)
 8001c58:	481c      	ldr	r0, [pc, #112]	; (8001ccc <vTaskStartScheduler+0x88>)
 8001c5a:	f7ff fc33 	bl	80014c4 <xTaskCreate>
 8001c5e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d102      	bne.n	8001c6c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001c66:	f000 fddb 	bl	8002820 <xTimerCreateTimerTask>
 8001c6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d115      	bne.n	8001c9e <vTaskStartScheduler+0x5a>
 8001c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c76:	f383 8811 	msr	BASEPRI, r3
 8001c7a:	f3bf 8f6f 	isb	sy
 8001c7e:	f3bf 8f4f 	dsb	sy
 8001c82:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <vTaskStartScheduler+0x8c>)
 8001c86:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <vTaskStartScheduler+0x90>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <vTaskStartScheduler+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001c98:	f7fe fbc6 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001c9c:	e00d      	b.n	8001cba <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d109      	bne.n	8001cba <vTaskStartScheduler+0x76>
 8001ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001caa:	f383 8811 	msr	BASEPRI, r3
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	e7fe      	b.n	8001cb8 <vTaskStartScheduler+0x74>
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20007ba8 	.word	0x20007ba8
 8001cc8:	08004c94 	.word	0x08004c94
 8001ccc:	08002345 	.word	0x08002345
 8001cd0:	20007ba4 	.word	0x20007ba4
 8001cd4:	20007b90 	.word	0x20007b90
 8001cd8:	20007b88 	.word	0x20007b88

08001cdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <vTaskSuspendAll+0x18>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4a03      	ldr	r2, [pc, #12]	; (8001cf4 <vTaskSuspendAll+0x18>)
 8001ce8:	6013      	str	r3, [r2, #0]
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	20007bac 	.word	0x20007bac

08001cf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001d06:	4b41      	ldr	r3, [pc, #260]	; (8001e0c <xTaskResumeAll+0x114>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d109      	bne.n	8001d22 <xTaskResumeAll+0x2a>
 8001d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d12:	f383 8811 	msr	BASEPRI, r3
 8001d16:	f3bf 8f6f 	isb	sy
 8001d1a:	f3bf 8f4f 	dsb	sy
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	e7fe      	b.n	8001d20 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001d22:	f7fe fc0d 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001d26:	4b39      	ldr	r3, [pc, #228]	; (8001e0c <xTaskResumeAll+0x114>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	4a37      	ldr	r2, [pc, #220]	; (8001e0c <xTaskResumeAll+0x114>)
 8001d2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <xTaskResumeAll+0x114>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d161      	bne.n	8001dfc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001d38:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <xTaskResumeAll+0x118>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d05d      	beq.n	8001dfc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d40:	e02e      	b.n	8001da0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001d42:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <xTaskResumeAll+0x11c>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	3318      	adds	r3, #24
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fac8 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	3304      	adds	r3, #4
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fac3 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d62:	2201      	movs	r2, #1
 8001d64:	409a      	lsls	r2, r3
 8001d66:	4b2c      	ldr	r3, [pc, #176]	; (8001e18 <xTaskResumeAll+0x120>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	4a2a      	ldr	r2, [pc, #168]	; (8001e18 <xTaskResumeAll+0x120>)
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <xTaskResumeAll+0x124>)
 8001d7e:	441a      	add	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3304      	adds	r3, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f7fe fa4f 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <xTaskResumeAll+0x128>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d302      	bcc.n	8001da0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001d9a:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <xTaskResumeAll+0x12c>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <xTaskResumeAll+0x11c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1cc      	bne.n	8001d42 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001dae:	f000 fb6f 	bl	8002490 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <xTaskResumeAll+0x130>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001dbe:	f000 f847 	bl	8001e50 <xTaskIncrementTick>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001dc8:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <xTaskResumeAll+0x12c>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f1      	bne.n	8001dbe <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <xTaskResumeAll+0x130>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001de0:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <xTaskResumeAll+0x12c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d009      	beq.n	8001dfc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001de8:	2301      	movs	r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001dec:	4b0f      	ldr	r3, [pc, #60]	; (8001e2c <xTaskResumeAll+0x134>)
 8001dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	f3bf 8f4f 	dsb	sy
 8001df8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001dfc:	f7fe fbce 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001e00:	68bb      	ldr	r3, [r7, #8]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20007bac 	.word	0x20007bac
 8001e10:	20007b84 	.word	0x20007b84
 8001e14:	20007b44 	.word	0x20007b44
 8001e18:	20007b8c 	.word	0x20007b8c
 8001e1c:	200078bc 	.word	0x200078bc
 8001e20:	200078b8 	.word	0x200078b8
 8001e24:	20007b98 	.word	0x20007b98
 8001e28:	20007b94 	.word	0x20007b94
 8001e2c:	e000ed04 	.word	0xe000ed04

08001e30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <xTaskGetTickCount+0x1c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001e3c:	687b      	ldr	r3, [r7, #4]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20007b88 	.word	0x20007b88

08001e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e5a:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <xTaskIncrementTick+0x14c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f040 808c 	bne.w	8001f7c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001e64:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <xTaskIncrementTick+0x150>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	; (8001fa0 <xTaskIncrementTick+0x150>)
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d11f      	bne.n	8001eb8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001e78:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <xTaskIncrementTick+0x154>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <xTaskIncrementTick+0x46>
 8001e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e86:	f383 8811 	msr	BASEPRI, r3
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	e7fe      	b.n	8001e94 <xTaskIncrementTick+0x44>
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <xTaskIncrementTick+0x154>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	4b42      	ldr	r3, [pc, #264]	; (8001fa8 <xTaskIncrementTick+0x158>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <xTaskIncrementTick+0x154>)
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4a40      	ldr	r2, [pc, #256]	; (8001fa8 <xTaskIncrementTick+0x158>)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b40      	ldr	r3, [pc, #256]	; (8001fac <xTaskIncrementTick+0x15c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	4a3e      	ldr	r2, [pc, #248]	; (8001fac <xTaskIncrementTick+0x15c>)
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	f000 faec 	bl	8002490 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <xTaskIncrementTick+0x160>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d34d      	bcc.n	8001f5e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001ec2:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <xTaskIncrementTick+0x154>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <xTaskIncrementTick+0x80>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <xTaskIncrementTick+0x82>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d004      	beq.n	8001ee0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ed6:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <xTaskIncrementTick+0x160>)
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	601a      	str	r2, [r3, #0]
					break;
 8001ede:	e03e      	b.n	8001f5e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ee0:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <xTaskIncrementTick+0x154>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d203      	bcs.n	8001f00 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001ef8:	4a2d      	ldr	r2, [pc, #180]	; (8001fb0 <xTaskIncrementTick+0x160>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
						break;
 8001efe:	e02e      	b.n	8001f5e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	3304      	adds	r3, #4
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe f9ed 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3318      	adds	r3, #24
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe f9e4 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	2201      	movs	r2, #1
 8001f22:	409a      	lsls	r2, r3
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <xTaskIncrementTick+0x164>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	4a22      	ldr	r2, [pc, #136]	; (8001fb4 <xTaskIncrementTick+0x164>)
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <xTaskIncrementTick+0x168>)
 8001f3c:	441a      	add	r2, r3
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3304      	adds	r3, #4
 8001f42:	4619      	mov	r1, r3
 8001f44:	4610      	mov	r0, r2
 8001f46:	f7fe f970 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <xTaskIncrementTick+0x16c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d3b4      	bcc.n	8001ec2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f5c:	e7b1      	b.n	8001ec2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <xTaskIncrementTick+0x16c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f64:	4914      	ldr	r1, [pc, #80]	; (8001fb8 <xTaskIncrementTick+0x168>)
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	440b      	add	r3, r1
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d907      	bls.n	8001f86 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001f76:	2301      	movs	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e004      	b.n	8001f86 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <xTaskIncrementTick+0x170>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a0f      	ldr	r2, [pc, #60]	; (8001fc0 <xTaskIncrementTick+0x170>)
 8001f84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <xTaskIncrementTick+0x174>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001f92:	697b      	ldr	r3, [r7, #20]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20007bac 	.word	0x20007bac
 8001fa0:	20007b88 	.word	0x20007b88
 8001fa4:	20007b3c 	.word	0x20007b3c
 8001fa8:	20007b40 	.word	0x20007b40
 8001fac:	20007b9c 	.word	0x20007b9c
 8001fb0:	20007ba4 	.word	0x20007ba4
 8001fb4:	20007b8c 	.word	0x20007b8c
 8001fb8:	200078bc 	.word	0x200078bc
 8001fbc:	200078b8 	.word	0x200078b8
 8001fc0:	20007b94 	.word	0x20007b94
 8001fc4:	20007b98 	.word	0x20007b98

08001fc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001fce:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <vTaskSwitchContext+0xec>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001fd6:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <vTaskSwitchContext+0xf0>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001fdc:	e065      	b.n	80020aa <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001fde:	4b36      	ldr	r3, [pc, #216]	; (80020b8 <vTaskSwitchContext+0xf0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <vTaskSwitchContext+0xf4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	61fb      	str	r3, [r7, #28]
 8001fec:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d111      	bne.n	8002020 <vTaskSwitchContext+0x58>
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	3304      	adds	r3, #4
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	429a      	cmp	r2, r3
 8002006:	d10b      	bne.n	8002020 <vTaskSwitchContext+0x58>
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	3308      	adds	r3, #8
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	429a      	cmp	r2, r3
 8002012:	d105      	bne.n	8002020 <vTaskSwitchContext+0x58>
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	330c      	adds	r3, #12
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	429a      	cmp	r2, r3
 800201e:	d008      	beq.n	8002032 <vTaskSwitchContext+0x6a>
 8002020:	4b26      	ldr	r3, [pc, #152]	; (80020bc <vTaskSwitchContext+0xf4>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <vTaskSwitchContext+0xf4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	3334      	adds	r3, #52	; 0x34
 800202a:	4619      	mov	r1, r3
 800202c:	4610      	mov	r0, r2
 800202e:	f001 fd94 	bl	8003b5a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002032:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <vTaskSwitchContext+0xf8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	fab3 f383 	clz	r3, r3
 800203e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002040:	7afb      	ldrb	r3, [r7, #11]
 8002042:	f1c3 031f 	rsb	r3, r3, #31
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	491e      	ldr	r1, [pc, #120]	; (80020c4 <vTaskSwitchContext+0xfc>)
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <vTaskSwitchContext+0xa8>
	__asm volatile
 800205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002060:	f383 8811 	msr	BASEPRI, r3
 8002064:	f3bf 8f6f 	isb	sy
 8002068:	f3bf 8f4f 	dsb	sy
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	e7fe      	b.n	800206e <vTaskSwitchContext+0xa6>
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <vTaskSwitchContext+0xfc>)
 800207c:	4413      	add	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	3308      	adds	r3, #8
 8002092:	429a      	cmp	r2, r3
 8002094:	d104      	bne.n	80020a0 <vTaskSwitchContext+0xd8>
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <vTaskSwitchContext+0xf4>)
 80020a8:	6013      	str	r3, [r2, #0]
}
 80020aa:	bf00      	nop
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20007bac 	.word	0x20007bac
 80020b8:	20007b98 	.word	0x20007b98
 80020bc:	200078b8 	.word	0x200078b8
 80020c0:	20007b8c 	.word	0x20007b8c
 80020c4:	200078bc 	.word	0x200078bc

080020c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d109      	bne.n	80020ec <vTaskPlaceOnEventList+0x24>
 80020d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e7fe      	b.n	80020ea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <vTaskPlaceOnEventList+0x44>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3318      	adds	r3, #24
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7fe f8bc 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80020fa:	2101      	movs	r1, #1
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f000 fb29 	bl	8002754 <prvAddCurrentTaskToDelayedList>
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200078b8 	.word	0x200078b8

08002110 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <vTaskPlaceOnEventListRestricted+0x26>
 8002122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002126:	f383 8811 	msr	BASEPRI, r3
 800212a:	f3bf 8f6f 	isb	sy
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	e7fe      	b.n	8002134 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <vTaskPlaceOnEventListRestricted+0x50>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3318      	adds	r3, #24
 800213c:	4619      	mov	r1, r3
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f7fe f873 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295
 800214e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	68b8      	ldr	r0, [r7, #8]
 8002154:	f000 fafe 	bl	8002754 <prvAddCurrentTaskToDelayedList>
	}
 8002158:	bf00      	nop
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	200078b8 	.word	0x200078b8

08002164 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <xTaskRemoveFromEventList+0x2a>
 800217a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217e:	f383 8811 	msr	BASEPRI, r3
 8002182:	f3bf 8f6f 	isb	sy
 8002186:	f3bf 8f4f 	dsb	sy
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	e7fe      	b.n	800218c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	3318      	adds	r3, #24
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe f8a6 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002198:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <xTaskRemoveFromEventList+0xac>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d11c      	bne.n	80021da <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	3304      	adds	r3, #4
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f89d 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	2201      	movs	r2, #1
 80021b0:	409a      	lsls	r2, r3
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <xTaskRemoveFromEventList+0xb0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	4a16      	ldr	r2, [pc, #88]	; (8002214 <xTaskRemoveFromEventList+0xb0>)
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4a13      	ldr	r2, [pc, #76]	; (8002218 <xTaskRemoveFromEventList+0xb4>)
 80021ca:	441a      	add	r2, r3
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f7fe f829 	bl	800022a <vListInsertEnd>
 80021d8:	e005      	b.n	80021e6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	3318      	adds	r3, #24
 80021de:	4619      	mov	r1, r3
 80021e0:	480e      	ldr	r0, [pc, #56]	; (800221c <xTaskRemoveFromEventList+0xb8>)
 80021e2:	f7fe f822 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <xTaskRemoveFromEventList+0xbc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d905      	bls.n	8002200 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80021f4:	2301      	movs	r3, #1
 80021f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <xTaskRemoveFromEventList+0xc0>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e001      	b.n	8002204 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002204:	697b      	ldr	r3, [r7, #20]
}
 8002206:	4618      	mov	r0, r3
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20007bac 	.word	0x20007bac
 8002214:	20007b8c 	.word	0x20007b8c
 8002218:	200078bc 	.word	0x200078bc
 800221c:	20007b44 	.word	0x20007b44
 8002220:	200078b8 	.word	0x200078b8
 8002224:	20007b98 	.word	0x20007b98

08002228 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <vTaskSetTimeOutState+0x22>
 8002236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223a:	f383 8811 	msr	BASEPRI, r3
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	f3bf 8f4f 	dsb	sy
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	e7fe      	b.n	8002248 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <vTaskSetTimeOutState+0x40>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <vTaskSetTimeOutState+0x44>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	605a      	str	r2, [r3, #4]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20007b9c 	.word	0x20007b9c
 800226c:	20007b88 	.word	0x20007b88

08002270 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d109      	bne.n	8002294 <xTaskCheckForTimeOut+0x24>
 8002280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002284:	f383 8811 	msr	BASEPRI, r3
 8002288:	f3bf 8f6f 	isb	sy
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e7fe      	b.n	8002292 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <xTaskCheckForTimeOut+0x3e>
 800229a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	e7fe      	b.n	80022ac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80022ae:	f7fe f947 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <xTaskCheckForTimeOut+0xb4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c0:	d102      	bne.n	80022c8 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e026      	b.n	8002316 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b16      	ldr	r3, [pc, #88]	; (8002328 <xTaskCheckForTimeOut+0xb8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d007      	beq.n	80022e4 <xTaskCheckForTimeOut+0x74>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d802      	bhi.n	80022e4 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80022de:	2301      	movs	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e018      	b.n	8002316 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	1ad2      	subs	r2, r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d20e      	bcs.n	8002312 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6859      	ldr	r1, [r3, #4]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1acb      	subs	r3, r1, r3
 8002300:	441a      	add	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ff8e 	bl	8002228 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e001      	b.n	8002316 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8002312:	2301      	movs	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002316:	f7fe f941 	bl	800059c <vPortExitCritical>

	return xReturn;
 800231a:	697b      	ldr	r3, [r7, #20]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20007b88 	.word	0x20007b88
 8002328:	20007b9c 	.word	0x20007b9c

0800232c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <vTaskMissedYield+0x14>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	20007b98 	.word	0x20007b98

08002344 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800234c:	f000 f854 	bl	80023f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <prvIdleTask+0x2c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d907      	bls.n	8002368 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <prvIdleTask+0x30>)
 800235a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002368:	f001 fbfd 	bl	8003b66 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800236c:	e7ee      	b.n	800234c <prvIdleTask+0x8>
 800236e:	bf00      	nop
 8002370:	200078bc 	.word	0x200078bc
 8002374:	e000ed04 	.word	0xe000ed04

08002378 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
 8002382:	e00c      	b.n	800239e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4a12      	ldr	r2, [pc, #72]	; (80023d8 <prvInitialiseTaskLists+0x60>)
 8002390:	4413      	add	r3, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f7fd ff1c 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3301      	adds	r3, #1
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b1d      	cmp	r3, #29
 80023a2:	d9ef      	bls.n	8002384 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80023a4:	480d      	ldr	r0, [pc, #52]	; (80023dc <prvInitialiseTaskLists+0x64>)
 80023a6:	f7fd ff13 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80023aa:	480d      	ldr	r0, [pc, #52]	; (80023e0 <prvInitialiseTaskLists+0x68>)
 80023ac:	f7fd ff10 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <prvInitialiseTaskLists+0x6c>)
 80023b2:	f7fd ff0d 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80023b6:	480c      	ldr	r0, [pc, #48]	; (80023e8 <prvInitialiseTaskLists+0x70>)
 80023b8:	f7fd ff0a 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80023bc:	480b      	ldr	r0, [pc, #44]	; (80023ec <prvInitialiseTaskLists+0x74>)
 80023be:	f7fd ff07 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <prvInitialiseTaskLists+0x78>)
 80023c4:	4a05      	ldr	r2, [pc, #20]	; (80023dc <prvInitialiseTaskLists+0x64>)
 80023c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80023c8:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <prvInitialiseTaskLists+0x7c>)
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <prvInitialiseTaskLists+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200078bc 	.word	0x200078bc
 80023dc:	20007b14 	.word	0x20007b14
 80023e0:	20007b28 	.word	0x20007b28
 80023e4:	20007b44 	.word	0x20007b44
 80023e8:	20007b58 	.word	0x20007b58
 80023ec:	20007b70 	.word	0x20007b70
 80023f0:	20007b3c 	.word	0x20007b3c
 80023f4:	20007b40 	.word	0x20007b40

080023f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80023fe:	e028      	b.n	8002452 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002400:	f7ff fc6c 	bl	8001cdc <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <prvCheckTasksWaitingTermination+0x6c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002414:	f7ff fc70 	bl	8001cf8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d119      	bne.n	8002452 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800241e:	f7fe f88f 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <prvCheckTasksWaitingTermination+0x6c>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	3304      	adds	r3, #4
 800242e:	4618      	mov	r0, r3
 8002430:	f7fd ff58 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <prvCheckTasksWaitingTermination+0x70>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3b01      	subs	r3, #1
 800243a:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <prvCheckTasksWaitingTermination+0x70>)
 800243c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <prvCheckTasksWaitingTermination+0x74>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3b01      	subs	r3, #1
 8002444:	4a09      	ldr	r2, [pc, #36]	; (800246c <prvCheckTasksWaitingTermination+0x74>)
 8002446:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002448:	f7fe f8a8 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800244c:	6838      	ldr	r0, [r7, #0]
 800244e:	f000 f80f 	bl	8002470 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <prvCheckTasksWaitingTermination+0x74>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1d2      	bne.n	8002400 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20007b58 	.word	0x20007b58
 8002468:	20007b84 	.word	0x20007b84
 800246c:	20007b6c 	.word	0x20007b6c

08002470 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fa35 	bl	80008ec <vPortFree>
			vPortFree( pxTCB );
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7fe fa32 	bl	80008ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <prvResetNextTaskUnblockTime+0x44>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <prvResetNextTaskUnblockTime+0x14>
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <prvResetNextTaskUnblockTime+0x16>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <prvResetNextTaskUnblockTime+0x48>)
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80024b2:	e008      	b.n	80024c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024b4:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <prvResetNextTaskUnblockTime+0x44>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <prvResetNextTaskUnblockTime+0x48>)
 80024c4:	6013      	str	r3, [r2, #0]
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20007b3c 	.word	0x20007b3c
 80024d8:	20007ba4 	.word	0x20007ba4

080024dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <xTaskGetCurrentTaskHandle+0x1c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80024e8:	687b      	ldr	r3, [r7, #4]
	}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	200078b8 	.word	0x200078b8

080024fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <xTaskGetSchedulerState+0x34>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800250a:	2301      	movs	r3, #1
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	e008      	b.n	8002522 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <xTaskGetSchedulerState+0x38>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d102      	bne.n	800251e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002518:	2302      	movs	r3, #2
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	e001      	b.n	8002522 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002522:	687b      	ldr	r3, [r7, #4]
	}
 8002524:	4618      	mov	r0, r3
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	20007b90 	.word	0x20007b90
 8002534:	20007bac 	.word	0x20007bac

08002538 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d062      	beq.n	8002610 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254e:	4b32      	ldr	r3, [pc, #200]	; (8002618 <vTaskPriorityInherit+0xe0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	429a      	cmp	r2, r3
 8002556:	d25b      	bcs.n	8002610 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	db06      	blt.n	800256e <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002560:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <vTaskPriorityInherit+0xe0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	f1c3 021e 	rsb	r2, r3, #30
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6959      	ldr	r1, [r3, #20]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4a27      	ldr	r2, [pc, #156]	; (800261c <vTaskPriorityInherit+0xe4>)
 8002580:	4413      	add	r3, r2
 8002582:	4299      	cmp	r1, r3
 8002584:	d101      	bne.n	800258a <vTaskPriorityInherit+0x52>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <vTaskPriorityInherit+0x54>
 800258a:	2300      	movs	r3, #0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d03a      	beq.n	8002606 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3304      	adds	r3, #4
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd fea5 	bl	80002e4 <uxListRemove>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d115      	bne.n	80025cc <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a4:	491d      	ldr	r1, [pc, #116]	; (800261c <vTaskPriorityInherit+0xe4>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10a      	bne.n	80025cc <vTaskPriorityInherit+0x94>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	2201      	movs	r2, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43da      	mvns	r2, r3
 80025c2:	4b17      	ldr	r3, [pc, #92]	; (8002620 <vTaskPriorityInherit+0xe8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4013      	ands	r3, r2
 80025c8:	4a15      	ldr	r2, [pc, #84]	; (8002620 <vTaskPriorityInherit+0xe8>)
 80025ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025cc:	4b12      	ldr	r3, [pc, #72]	; (8002618 <vTaskPriorityInherit+0xe0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025da:	2201      	movs	r2, #1
 80025dc:	409a      	lsls	r2, r3
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <vTaskPriorityInherit+0xe8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	4a0e      	ldr	r2, [pc, #56]	; (8002620 <vTaskPriorityInherit+0xe8>)
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4a09      	ldr	r2, [pc, #36]	; (800261c <vTaskPriorityInherit+0xe4>)
 80025f6:	441a      	add	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	3304      	adds	r3, #4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4610      	mov	r0, r2
 8002600:	f7fd fe13 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002604:	e004      	b.n	8002610 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <vTaskPriorityInherit+0xe0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	200078b8 	.word	0x200078b8
 800261c:	200078bc 	.word	0x200078bc
 8002620:	20007b8c 	.word	0x20007b8c

08002624 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d06c      	beq.n	8002714 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800263a:	4b39      	ldr	r3, [pc, #228]	; (8002720 <xTaskPriorityDisinherit+0xfc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	429a      	cmp	r2, r3
 8002642:	d009      	beq.n	8002658 <xTaskPriorityDisinherit+0x34>
 8002644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	e7fe      	b.n	8002656 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <xTaskPriorityDisinherit+0x50>
 8002660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	e7fe      	b.n	8002672 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	429a      	cmp	r2, r3
 8002688:	d044      	beq.n	8002714 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	2b00      	cmp	r3, #0
 8002690:	d140      	bne.n	8002714 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	3304      	adds	r3, #4
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd fe24 	bl	80002e4 <uxListRemove>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d115      	bne.n	80026ce <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a6:	491f      	ldr	r1, [pc, #124]	; (8002724 <xTaskPriorityDisinherit+0x100>)
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d10a      	bne.n	80026ce <xTaskPriorityDisinherit+0xaa>
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	2201      	movs	r2, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	4b18      	ldr	r3, [pc, #96]	; (8002728 <xTaskPriorityDisinherit+0x104>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4013      	ands	r3, r2
 80026ca:	4a17      	ldr	r2, [pc, #92]	; (8002728 <xTaskPriorityDisinherit+0x104>)
 80026cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	f1c3 021e 	rsb	r2, r3, #30
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	2201      	movs	r2, #1
 80026e8:	409a      	lsls	r2, r3
 80026ea:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <xTaskPriorityDisinherit+0x104>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <xTaskPriorityDisinherit+0x104>)
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f8:	4613      	mov	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4a08      	ldr	r2, [pc, #32]	; (8002724 <xTaskPriorityDisinherit+0x100>)
 8002702:	441a      	add	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	3304      	adds	r3, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f7fd fd8d 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002710:	2301      	movs	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002714:	697b      	ldr	r3, [r7, #20]
	}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200078b8 	.word	0x200078b8
 8002724:	200078bc 	.word	0x200078bc
 8002728:	20007b8c 	.word	0x20007b8c

0800272c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <pvTaskIncrementMutexHeldCount+0x24>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <pvTaskIncrementMutexHeldCount+0x24>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800273e:	3201      	adds	r2, #1
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8002742:	4b03      	ldr	r3, [pc, #12]	; (8002750 <pvTaskIncrementMutexHeldCount+0x24>)
 8002744:	681b      	ldr	r3, [r3, #0]
	}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	200078b8 	.word	0x200078b8

08002754 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800275e:	4b29      	ldr	r3, [pc, #164]	; (8002804 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002764:	4b28      	ldr	r3, [pc, #160]	; (8002808 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3304      	adds	r3, #4
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fdba 	bl	80002e4 <uxListRemove>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2201      	movs	r2, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	4b21      	ldr	r3, [pc, #132]	; (800280c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4013      	ands	r3, r2
 800278a:	4a20      	ldr	r2, [pc, #128]	; (800280c <prvAddCurrentTaskToDelayedList+0xb8>)
 800278c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d10a      	bne.n	80027ac <prvAddCurrentTaskToDelayedList+0x58>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800279c:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <prvAddCurrentTaskToDelayedList+0xb4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	3304      	adds	r3, #4
 80027a2:	4619      	mov	r1, r3
 80027a4:	481a      	ldr	r0, [pc, #104]	; (8002810 <prvAddCurrentTaskToDelayedList+0xbc>)
 80027a6:	f7fd fd40 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80027aa:	e026      	b.n	80027fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d209      	bcs.n	80027d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <prvAddCurrentTaskToDelayedList+0xc0>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b0f      	ldr	r3, [pc, #60]	; (8002808 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3304      	adds	r3, #4
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f7fd fd4e 	bl	8000272 <vListInsert>
}
 80027d6:	e010      	b.n	80027fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <prvAddCurrentTaskToDelayedList+0xc4>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <prvAddCurrentTaskToDelayedList+0xb4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3304      	adds	r3, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4610      	mov	r0, r2
 80027e6:	f7fd fd44 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <prvAddCurrentTaskToDelayedList+0xc8>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d202      	bcs.n	80027fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80027f4:	4a09      	ldr	r2, [pc, #36]	; (800281c <prvAddCurrentTaskToDelayedList+0xc8>)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	6013      	str	r3, [r2, #0]
}
 80027fa:	bf00      	nop
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20007b88 	.word	0x20007b88
 8002808:	200078b8 	.word	0x200078b8
 800280c:	20007b8c 	.word	0x20007b8c
 8002810:	20007b70 	.word	0x20007b70
 8002814:	20007b40 	.word	0x20007b40
 8002818:	20007b3c 	.word	0x20007b3c
 800281c:	20007ba4 	.word	0x20007ba4

08002820 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800282a:	f000 fa8f 	bl	8002d4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <xTimerCreateTimerTask+0x54>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00b      	beq.n	800284e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <xTimerCreateTimerTask+0x58>)
 8002838:	9301      	str	r3, [sp, #4]
 800283a:	2303      	movs	r3, #3
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2300      	movs	r3, #0
 8002840:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002844:	490d      	ldr	r1, [pc, #52]	; (800287c <xTimerCreateTimerTask+0x5c>)
 8002846:	480e      	ldr	r0, [pc, #56]	; (8002880 <xTimerCreateTimerTask+0x60>)
 8002848:	f7fe fe3c 	bl	80014c4 <xTaskCreate>
 800284c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <xTimerCreateTimerTask+0x48>
 8002854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002858:	f383 8811 	msr	BASEPRI, r3
 800285c:	f3bf 8f6f 	isb	sy
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	e7fe      	b.n	8002866 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8002868:	687b      	ldr	r3, [r7, #4]
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20007be0 	.word	0x20007be0
 8002878:	20007be4 	.word	0x20007be4
 800287c:	08004c9c 	.word	0x08004c9c
 8002880:	0800299d 	.word	0x0800299d

08002884 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d109      	bne.n	80028b0 <xTimerGenericCommand+0x2c>
 800289c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a0:	f383 8811 	msr	BASEPRI, r3
 80028a4:	f3bf 8f6f 	isb	sy
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	e7fe      	b.n	80028ae <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <xTimerGenericCommand+0x94>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d02a      	beq.n	800290e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	dc18      	bgt.n	80028fc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80028ca:	f7ff fe17 	bl	80024fc <xTaskGetSchedulerState>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d109      	bne.n	80028e8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80028d4:	4b10      	ldr	r3, [pc, #64]	; (8002918 <xTimerGenericCommand+0x94>)
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	f107 0114 	add.w	r1, r7, #20
 80028dc:	2300      	movs	r3, #0
 80028de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e0:	f7fe f9e4 	bl	8000cac <xQueueGenericSend>
 80028e4:	6278      	str	r0, [r7, #36]	; 0x24
 80028e6:	e012      	b.n	800290e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <xTimerGenericCommand+0x94>)
 80028ea:	6818      	ldr	r0, [r3, #0]
 80028ec:	f107 0114 	add.w	r1, r7, #20
 80028f0:	2300      	movs	r3, #0
 80028f2:	2200      	movs	r2, #0
 80028f4:	f7fe f9da 	bl	8000cac <xQueueGenericSend>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24
 80028fa:	e008      	b.n	800290e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <xTimerGenericCommand+0x94>)
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	f107 0114 	add.w	r1, r7, #20
 8002904:	2300      	movs	r3, #0
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	f7fe faca 	bl	8000ea0 <xQueueGenericSendFromISR>
 800290c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002910:	4618      	mov	r0, r3
 8002912:	3728      	adds	r7, #40	; 0x28
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20007be0 	.word	0x20007be0

0800291c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002926:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <prvProcessExpiredTimer+0x7c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3304      	adds	r3, #4
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fcd5 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d121      	bne.n	8002986 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	699a      	ldr	r2, [r3, #24]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	18d1      	adds	r1, r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f000 f8c8 	bl	8002ae4 <prvInsertTimerInActiveList>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d015      	beq.n	8002986 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800295a:	2300      	movs	r3, #0
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2300      	movs	r3, #0
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	2100      	movs	r1, #0
 8002964:	6978      	ldr	r0, [r7, #20]
 8002966:	f7ff ff8d 	bl	8002884 <xTimerGenericCommand>
 800296a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <prvProcessExpiredTimer+0x6a>
 8002972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e7fe      	b.n	8002984 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	4798      	blx	r3
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20007bd8 	.word	0x20007bd8

0800299c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029a4:	f107 0308 	add.w	r3, r7, #8
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 f857 	bl	8002a5c <prvGetNextExpireTime>
 80029ae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4619      	mov	r1, r3
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f803 	bl	80029c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80029ba:	f000 f8d5 	bl	8002b68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80029be:	e7f1      	b.n	80029a4 <prvTimerTask+0x8>

080029c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80029ca:	f7ff f987 	bl	8001cdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029ce:	f107 0308 	add.w	r3, r7, #8
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 f866 	bl	8002aa4 <prvSampleTimeNow>
 80029d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d130      	bne.n	8002a42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <prvProcessTimerOrBlockTask+0x3c>
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d806      	bhi.n	80029fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80029ee:	f7ff f983 	bl	8001cf8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80029f2:	68f9      	ldr	r1, [r7, #12]
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff91 	bl	800291c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80029fa:	e024      	b.n	8002a46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d008      	beq.n	8002a14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002a02:	4b13      	ldr	r3, [pc, #76]	; (8002a50 <prvProcessTimerOrBlockTask+0x90>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <prvProcessTimerOrBlockTask+0x94>)
 8002a16:	6818      	ldr	r0, [r3, #0]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	4619      	mov	r1, r3
 8002a22:	f7fe fd1b 	bl	800145c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002a26:	f7ff f967 	bl	8001cf8 <xTaskResumeAll>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <prvProcessTimerOrBlockTask+0x98>)
 8002a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	f3bf 8f6f 	isb	sy
}
 8002a40:	e001      	b.n	8002a46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002a42:	f7ff f959 	bl	8001cf8 <xTaskResumeAll>
}
 8002a46:	bf00      	nop
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20007bdc 	.word	0x20007bdc
 8002a54:	20007be0 	.word	0x20007be0
 8002a58:	e000ed04 	.word	0xe000ed04

08002a5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <prvGetNextExpireTime+0x44>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf0c      	ite	eq
 8002a6e:	2301      	moveq	r3, #1
 8002a70:	2300      	movne	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d105      	bne.n	8002a8e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a82:	4b07      	ldr	r3, [pc, #28]	; (8002aa0 <prvGetNextExpireTime+0x44>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e001      	b.n	8002a92 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002a92:	68fb      	ldr	r3, [r7, #12]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	20007bd8 	.word	0x20007bd8

08002aa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002aac:	f7ff f9c0 	bl	8001e30 <xTaskGetTickCount>
 8002ab0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <prvSampleTimeNow+0x3c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d205      	bcs.n	8002ac8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002abc:	f000 f8e6 	bl	8002c8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e002      	b.n	8002ace <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002ace:	4a04      	ldr	r2, [pc, #16]	; (8002ae0 <prvSampleTimeNow+0x3c>)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20007be8 	.word	0x20007be8

08002ae4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d812      	bhi.n	8002b30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	1ad2      	subs	r2, r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	e01b      	b.n	8002b56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <prvInsertTimerInActiveList+0x7c>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	3304      	adds	r3, #4
 8002b26:	4619      	mov	r1, r3
 8002b28:	4610      	mov	r0, r2
 8002b2a:	f7fd fba2 	bl	8000272 <vListInsert>
 8002b2e:	e012      	b.n	8002b56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d206      	bcs.n	8002b46 <prvInsertTimerInActiveList+0x62>
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d302      	bcc.n	8002b46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	e007      	b.n	8002b56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <prvInsertTimerInActiveList+0x80>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4610      	mov	r0, r2
 8002b52:	f7fd fb8e 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002b56:	697b      	ldr	r3, [r7, #20]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20007bdc 	.word	0x20007bdc
 8002b64:	20007bd8 	.word	0x20007bd8

08002b68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	; 0x30
 8002b6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002b6e:	e07a      	b.n	8002c66 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	db77      	blt.n	8002c66 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d004      	beq.n	8002b8c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	3304      	adds	r3, #4
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fd fbac 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b8c:	1d3b      	adds	r3, r7, #4
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff ff88 	bl	8002aa4 <prvSampleTimeNow>
 8002b94:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b09      	cmp	r3, #9
 8002b9a:	d863      	bhi.n	8002c64 <prvProcessReceivedCommands+0xfc>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <prvProcessReceivedCommands+0x3c>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bcd 	.word	0x08002bcd
 8002ba8:	08002bcd 	.word	0x08002bcd
 8002bac:	08002bcd 	.word	0x08002bcd
 8002bb0:	08002c67 	.word	0x08002c67
 8002bb4:	08002c27 	.word	0x08002c27
 8002bb8:	08002c5d 	.word	0x08002c5d
 8002bbc:	08002bcd 	.word	0x08002bcd
 8002bc0:	08002bcd 	.word	0x08002bcd
 8002bc4:	08002c67 	.word	0x08002c67
 8002bc8:	08002c27 	.word	0x08002c27
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	18d1      	adds	r1, r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a3a      	ldr	r2, [r7, #32]
 8002bd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bda:	f7ff ff83 	bl	8002ae4 <prvInsertTimerInActiveList>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d040      	beq.n	8002c66 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bea:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d138      	bne.n	8002c66 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	2300      	movs	r3, #0
 8002c02:	2100      	movs	r1, #0
 8002c04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c06:	f7ff fe3d 	bl	8002884 <xTimerGenericCommand>
 8002c0a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d129      	bne.n	8002c66 <prvProcessReceivedCommands+0xfe>
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	e7fe      	b.n	8002c24 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <prvProcessReceivedCommands+0xe0>
 8002c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c38:	f383 8811 	msr	BASEPRI, r3
 8002c3c:	f3bf 8f6f 	isb	sy
 8002c40:	f3bf 8f4f 	dsb	sy
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	e7fe      	b.n	8002c46 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	18d1      	adds	r1, r2, r3
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	6a3a      	ldr	r2, [r7, #32]
 8002c54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c56:	f7ff ff45 	bl	8002ae4 <prvInsertTimerInActiveList>
					break;
 8002c5a:	e004      	b.n	8002c66 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c5e:	f7fd fe45 	bl	80008ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002c62:	e000      	b.n	8002c66 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002c64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <prvProcessReceivedCommands+0x120>)
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	f107 0108 	add.w	r1, r7, #8
 8002c6e:	2300      	movs	r3, #0
 8002c70:	2200      	movs	r2, #0
 8002c72:	f7fe f9a9 	bl	8000fc8 <xQueueGenericReceive>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f47f af79 	bne.w	8002b70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002c7e:	bf00      	nop
 8002c80:	3728      	adds	r7, #40	; 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20007be0 	.word	0x20007be0

08002c8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c92:	e044      	b.n	8002d1e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c94:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <prvSwitchTimerLists+0xb8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c9e:	4b29      	ldr	r3, [pc, #164]	; (8002d44 <prvSwitchTimerLists+0xb8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fb19 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	6938      	ldr	r0, [r7, #16]
 8002cb8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d12d      	bne.n	8002d1e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	4413      	add	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d90e      	bls.n	8002cf2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002ce0:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <prvSwitchTimerLists+0xb8>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f7fd fac1 	bl	8000272 <vListInsert>
 8002cf0:	e015      	b.n	8002d1e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	6938      	ldr	r0, [r7, #16]
 8002cfe:	f7ff fdc1 	bl	8002884 <xTimerGenericCommand>
 8002d02:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d109      	bne.n	8002d1e <prvSwitchTimerLists+0x92>
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	603b      	str	r3, [r7, #0]
 8002d1c:	e7fe      	b.n	8002d1c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002d1e:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <prvSwitchTimerLists+0xb8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1b5      	bne.n	8002c94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <prvSwitchTimerLists+0xb8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <prvSwitchTimerLists+0xbc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <prvSwitchTimerLists+0xb8>)
 8002d34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002d36:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <prvSwitchTimerLists+0xbc>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6013      	str	r3, [r2, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20007bd8 	.word	0x20007bd8
 8002d48:	20007bdc 	.word	0x20007bdc

08002d4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002d50:	f7fd fbf6 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <prvCheckForValidListAndQueue+0x54>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002d5c:	4811      	ldr	r0, [pc, #68]	; (8002da4 <prvCheckForValidListAndQueue+0x58>)
 8002d5e:	f7fd fa37 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002d62:	4811      	ldr	r0, [pc, #68]	; (8002da8 <prvCheckForValidListAndQueue+0x5c>)
 8002d64:	f7fd fa34 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <prvCheckForValidListAndQueue+0x60>)
 8002d6a:	4a0e      	ldr	r2, [pc, #56]	; (8002da4 <prvCheckForValidListAndQueue+0x58>)
 8002d6c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <prvCheckForValidListAndQueue+0x64>)
 8002d70:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <prvCheckForValidListAndQueue+0x5c>)
 8002d72:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002d74:	2200      	movs	r2, #0
 8002d76:	210c      	movs	r1, #12
 8002d78:	2005      	movs	r0, #5
 8002d7a:	f7fd ff3f 	bl	8000bfc <xQueueGenericCreate>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <prvCheckForValidListAndQueue+0x54>)
 8002d82:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <prvCheckForValidListAndQueue+0x54>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d8c:	4b04      	ldr	r3, [pc, #16]	; (8002da0 <prvCheckForValidListAndQueue+0x54>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4908      	ldr	r1, [pc, #32]	; (8002db4 <prvCheckForValidListAndQueue+0x68>)
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fe fb3a 	bl	800140c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d98:	f7fd fc00 	bl	800059c <vPortExitCritical>
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20007be0 	.word	0x20007be0
 8002da4:	20007bb0 	.word	0x20007bb0
 8002da8:	20007bc4 	.word	0x20007bc4
 8002dac:	20007bd8 	.word	0x20007bd8
 8002db0:	20007bdc 	.word	0x20007bdc
 8002db4:	08004ca4 	.word	0x08004ca4

08002db8 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <DAC_SetChannel1Data+0x34>)
 8002dca:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	6013      	str	r3, [r2, #0]
}
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40007400 	.word	0x40007400

08002df0 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <DMA_Init+0xac>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e1a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e26:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	6a1b      	ldr	r3, [r3, #32]
 8002e2c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e32:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e3e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0307 	bic.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60da      	str	r2, [r3, #12]
}
 8002e8e:	bf00      	nop
 8002e90:	3714      	adds	r7, #20
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	f01c803f 	.word	0xf01c803f

08002ea0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002eac:	78fb      	ldrb	r3, [r7, #3]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f043 0201 	orr.w	r2, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002ebe:	e005      	b.n	8002ecc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f023 0201 	bic.w	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	601a      	str	r2, [r3, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e001      	b.n	8002efa <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <DMA_GetFlagStatus+0x6c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d802      	bhi.n	8002f28 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <DMA_GetFlagStatus+0x70>)
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	e001      	b.n	8002f2c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002f28:	4b14      	ldr	r3, [pc, #80]	; (8002f7c <DMA_GetFlagStatus+0x74>)
 8002f2a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e002      	b.n	8002f44 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002f4a:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
 8002f5e:	e001      	b.n	8002f64 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002f60:	2300      	movs	r3, #0
 8002f62:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	4002640f 	.word	0x4002640f
 8002f78:	40026000 	.word	0x40026000
 8002f7c:	40026400 	.word	0x40026400

08002f80 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a10      	ldr	r2, [pc, #64]	; (8002fd0 <DMA_ClearFlag+0x50>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d802      	bhi.n	8002f98 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <DMA_ClearFlag+0x54>)
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	e001      	b.n	8002f9c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <DMA_ClearFlag+0x58>)
 8002f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002fac:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002fb4:	e006      	b.n	8002fc4 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002fbc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	6093      	str	r3, [r2, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	4002640f 	.word	0x4002640f
 8002fd4:	40026000 	.word	0x40026000
 8002fd8:	40026400 	.word	0x40026400

08002fdc <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	887a      	ldrh	r2, [r7, #2]
 8002fec:	819a      	strh	r2, [r3, #12]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	460b      	mov	r3, r1
 8003004:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	891b      	ldrh	r3, [r3, #8]
 800300e:	b29a      	uxth	r2, r3
 8003010:	887b      	ldrh	r3, [r7, #2]
 8003012:	4013      	ands	r3, r2
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
 800301e:	e001      	b.n	8003024 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8003038:	4b38      	ldr	r3, [pc, #224]	; (800311c <Audio_MAL_IRQHandler+0xe8>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b38      	ldr	r3, [pc, #224]	; (8003120 <Audio_MAL_IRQHandler+0xec>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4619      	mov	r1, r3
 8003042:	4610      	mov	r0, r2
 8003044:	f7ff ff60 	bl	8002f08 <DMA_GetFlagStatus>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d064      	beq.n	8003118 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800304e:	4b35      	ldr	r3, [pc, #212]	; (8003124 <Audio_MAL_IRQHandler+0xf0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d04c      	beq.n	80030f0 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8003056:	bf00      	nop
 8003058:	4b30      	ldr	r3, [pc, #192]	; (800311c <Audio_MAL_IRQHandler+0xe8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff3b 	bl	8002ed8 <DMA_GetCmdStatus>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f7      	bne.n	8003058 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8003068:	4b2c      	ldr	r3, [pc, #176]	; (800311c <Audio_MAL_IRQHandler+0xe8>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <Audio_MAL_IRQHandler+0xec>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	4610      	mov	r0, r2
 8003074:	f7ff ff84 	bl	8002f80 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8003078:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <Audio_MAL_IRQHandler+0xf4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b2b      	ldr	r3, [pc, #172]	; (800312c <Audio_MAL_IRQHandler+0xf8>)
 8003080:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8003082:	4b28      	ldr	r3, [pc, #160]	; (8003124 <Audio_MAL_IRQHandler+0xf0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800308a:	4293      	cmp	r3, r2
 800308c:	bf28      	it	cs
 800308e:	4613      	movcs	r3, r2
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <Audio_MAL_IRQHandler+0xf8>)
 8003092:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8003094:	4b21      	ldr	r3, [pc, #132]	; (800311c <Audio_MAL_IRQHandler+0xe8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4924      	ldr	r1, [pc, #144]	; (800312c <Audio_MAL_IRQHandler+0xf8>)
 800309a:	4618      	mov	r0, r3
 800309c:	f7ff fea8 	bl	8002df0 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80030a0:	4b1e      	ldr	r3, [pc, #120]	; (800311c <Audio_MAL_IRQHandler+0xe8>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2101      	movs	r1, #1
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fefa 	bl	8002ea0 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80030ac:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <Audio_MAL_IRQHandler+0xf4>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <Audio_MAL_IRQHandler+0xf0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b8:	d203      	bcs.n	80030c2 <Audio_MAL_IRQHandler+0x8e>
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <Audio_MAL_IRQHandler+0xf0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	e000      	b.n	80030c4 <Audio_MAL_IRQHandler+0x90>
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <Audio_MAL_IRQHandler+0xfc>)
 80030c4:	4413      	add	r3, r2
 80030c6:	4a18      	ldr	r2, [pc, #96]	; (8003128 <Audio_MAL_IRQHandler+0xf4>)
 80030c8:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <Audio_MAL_IRQHandler+0xf0>)
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	4b15      	ldr	r3, [pc, #84]	; (8003124 <Audio_MAL_IRQHandler+0xf0>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030d6:	428b      	cmp	r3, r1
 80030d8:	bf28      	it	cs
 80030da:	460b      	movcs	r3, r1
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	4a11      	ldr	r2, [pc, #68]	; (8003124 <Audio_MAL_IRQHandler+0xf0>)
 80030e0:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <Audio_MAL_IRQHandler+0xe8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fed9 	bl	8002ea0 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 80030ee:	e013      	b.n	8003118 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 80030f0:	4b0a      	ldr	r3, [pc, #40]	; (800311c <Audio_MAL_IRQHandler+0xe8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fed2 	bl	8002ea0 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 80030fc:	4b07      	ldr	r3, [pc, #28]	; (800311c <Audio_MAL_IRQHandler+0xe8>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <Audio_MAL_IRQHandler+0xec>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f7ff ff3a 	bl	8002f80 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <Audio_MAL_IRQHandler+0xf4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f000 fc96 	bl	8003a44 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	2000000c 	.word	0x2000000c
 8003120:	20000010 	.word	0x20000010
 8003124:	20000004 	.word	0x20000004
 8003128:	20007c38 	.word	0x20007c38
 800312c:	20007c78 	.word	0x20007c78
 8003130:	0001fffe 	.word	0x0001fffe

08003134 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003138:	f7ff ff7c 	bl	8003034 <Audio_MAL_IRQHandler>
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}

08003140 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003144:	f7ff ff76 	bl	8003034 <Audio_MAL_IRQHandler>
}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}

0800314c <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8003150:	2102      	movs	r1, #2
 8003152:	480d      	ldr	r0, [pc, #52]	; (8003188 <SPI3_IRQHandler+0x3c>)
 8003154:	f7ff ff51 	bl	8002ffa <SPI_I2S_GetFlagStatus>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d011      	beq.n	8003182 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <SPI3_IRQHandler+0x40>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d106      	bne.n	8003174 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8003166:	f000 fc78 	bl	8003a5a <EVAL_AUDIO_GetSampleCallBack>
 800316a:	4603      	mov	r3, r0
 800316c:	4619      	mov	r1, r3
 800316e:	2004      	movs	r0, #4
 8003170:	f7ff fe22 	bl	8002db8 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8003174:	f000 fc71 	bl	8003a5a <EVAL_AUDIO_GetSampleCallBack>
 8003178:	4603      	mov	r3, r0
 800317a:	4619      	mov	r1, r3
 800317c:	4802      	ldr	r0, [pc, #8]	; (8003188 <SPI3_IRQHandler+0x3c>)
 800317e:	f7ff ff2d 	bl	8002fdc <SPI_I2S_SendData>
  }
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40003c00 	.word	0x40003c00
 800318c:	20000008 	.word	0x20000008

08003190 <DD_scheduler_initialize>:
#include "DD_scheduler.h"
QueueHandle_t dd_message_queue;

void DD_scheduler_initialize(void){
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
	printf("Initializing Queue for generator and scheduler: Starting\n");
 8003194:	480a      	ldr	r0, [pc, #40]	; (80031c0 <DD_scheduler_initialize+0x30>)
 8003196:	f001 fa17 	bl	80045c8 <puts>
	dd_message_queue = xQueueCreate(25, sizeof(dd_message));
 800319a:	2200      	movs	r2, #0
 800319c:	2124      	movs	r1, #36	; 0x24
 800319e:	2019      	movs	r0, #25
 80031a0:	f7fd fd2c 	bl	8000bfc <xQueueGenericCreate>
 80031a4:	4602      	mov	r2, r0
 80031a6:	4b07      	ldr	r3, [pc, #28]	; (80031c4 <DD_scheduler_initialize+0x34>)
 80031a8:	601a      	str	r2, [r3, #0]
    vQueueAddToRegistry(dd_message_queue,"Scheduler Queue");
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <DD_scheduler_initialize+0x34>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4906      	ldr	r1, [pc, #24]	; (80031c8 <DD_scheduler_initialize+0x38>)
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe f92b 	bl	800140c <vQueueAddToRegistry>
    printf("Initializing Queue for generator and scheduler: Done\n");
 80031b6:	4805      	ldr	r0, [pc, #20]	; (80031cc <DD_scheduler_initialize+0x3c>)
 80031b8:	f001 fa06 	bl	80045c8 <puts>
}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	08004cac 	.word	0x08004cac
 80031c4:	20007cb4 	.word	0x20007cb4
 80031c8:	08004ce8 	.word	0x08004ce8
 80031cc:	08004cf8 	.word	0x08004cf8

080031d0 <DD_scheduler_send_message>:

void DD_scheduler_send_message(dd_message message){
 80031d0:	b084      	sub	sp, #16
 80031d2:	b580      	push	{r7, lr}
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	f107 0e08 	add.w	lr, r7, #8
 80031da:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	if( xQueueSend(dd_message_queue, &message, portMAX_DELAY ) != pdPASS ) {
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <DD_scheduler_send_message+0x38>)
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	2300      	movs	r3, #0
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	f107 0108 	add.w	r1, r7, #8
 80031ec:	f7fd fd5e 	bl	8000cac <xQueueGenericSend>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d003      	beq.n	80031fe <DD_scheduler_send_message+0x2e>
		printf("Couldn't send message!\n");
 80031f6:	4805      	ldr	r0, [pc, #20]	; (800320c <DD_scheduler_send_message+0x3c>)
 80031f8:	f001 f9e6 	bl	80045c8 <puts>
	    return;
 80031fc:	bf00      	nop
	}
}
 80031fe:	46bd      	mov	sp, r7
 8003200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003204:	b004      	add	sp, #16
 8003206:	4770      	bx	lr
 8003208:	20007cb4 	.word	0x20007cb4
 800320c:	08004d30 	.word	0x08004d30

08003210 <handleOverDueTasks>:

void handleOverDueTasks(dd_task_lists* task_lists){
 8003210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003212:	b08b      	sub	sp, #44	; 0x2c
 8003214:	af04      	add	r7, sp, #16
 8003216:	6078      	str	r0, [r7, #4]
	dd_task_list* active = task_lists->active_task_list;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	613b      	str	r3, [r7, #16]
	dd_task_list_node* current = active->head;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]
	TickType_t current_time = xTaskGetTickCount();
 8003224:	f7fe fe04 	bl	8001e30 <xTaskGetTickCount>
 8003228:	60f8      	str	r0, [r7, #12]

	while(current != NULL){
 800322a:	e027      	b.n	800327c <handleOverDueTasks+0x6c>

		if(current->task.relative_deadline < current_time){
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	429a      	cmp	r2, r3
 8003234:	d21f      	bcs.n	8003276 <handleOverDueTasks+0x66>
			dd_task_list_node* overDueNode = remove_task(active, current->task.task_id);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	4619      	mov	r1, r3
 800323c:	6938      	ldr	r0, [r7, #16]
 800323e:	f000 fbad 	bl	800399c <remove_task>
 8003242:	60b8      	str	r0, [r7, #8]
			printf("Task %d was overdue, removing it from processing\n", (int)overDueNode->task.task_id);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4619      	mov	r1, r3
 800324a:	4810      	ldr	r0, [pc, #64]	; (800328c <handleOverDueTasks+0x7c>)
 800324c:	f000 ffce 	bl	80041ec <printf>
			add_task_to_list(task_lists->overdue_task_list, overDueNode->task);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689e      	ldr	r6, [r3, #8]
 8003254:	68bc      	ldr	r4, [r7, #8]
 8003256:	466d      	mov	r5, sp
 8003258:	f104 030c 	add.w	r3, r4, #12
 800325c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800325e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003262:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003266:	4630      	mov	r0, r6
 8003268:	f000 fb65 	bl	8003936 <add_task_to_list>
			vTaskDelete(overDueNode->task.t_handle);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fe fa59 	bl	8001728 <vTaskDelete>
		}
		current = current->next;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	617b      	str	r3, [r7, #20]
	while(current != NULL){
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1d4      	bne.n	800322c <handleOverDueTasks+0x1c>
	}
}
 8003282:	bf00      	nop
 8003284:	371c      	adds	r7, #28
 8003286:	46bd      	mov	sp, r7
 8003288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800328a:	bf00      	nop
 800328c:	08004d48 	.word	0x08004d48

08003290 <DD_scheduler>:

void DD_scheduler(void* parameters){
 8003290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003292:	b09b      	sub	sp, #108	; 0x6c
 8003294:	af04      	add	r7, sp, #16
 8003296:	6078      	str	r0, [r7, #4]
	dd_task_lists* task_lists = init_task_lists();
 8003298:	f000 fa60 	bl	800375c <init_task_lists>
 800329c:	6578      	str	r0, [r7, #84]	; 0x54
	dd_message queue_message;

	while(1){
		if( xQueueReceive( dd_message_queue, (void*)&queue_message, portMAX_DELAY ) == pdTRUE ){
 800329e:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <DD_scheduler+0x134>)
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80032a6:	2300      	movs	r3, #0
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	f7fd fe8c 	bl	8000fc8 <xQueueGenericReceive>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d1f3      	bne.n	800329e <DD_scheduler+0xe>
			TickType_t current_time = xTaskGetTickCount();
 80032b6:	f7fe fdbb 	bl	8001e30 <xTaskGetTickCount>
 80032ba:	6538      	str	r0, [r7, #80]	; 0x50
			printf("%d Scheduler: Received a message", (int)current_time);
 80032bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032be:	4619      	mov	r1, r3
 80032c0:	4841      	ldr	r0, [pc, #260]	; (80033c8 <DD_scheduler+0x138>)
 80032c2:	f000 ff93 	bl	80041ec <printf>
			handleOverDueTasks(task_lists);
 80032c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80032c8:	f7ff ffa2 	bl	8003210 <handleOverDueTasks>
			if(queue_message.message == release_dd_task){
 80032cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d127      	bne.n	8003324 <DD_scheduler+0x94>
				printf(" to release task with id %d\n", (int)queue_message.data.task_id);
 80032d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d6:	4619      	mov	r1, r3
 80032d8:	483c      	ldr	r0, [pc, #240]	; (80033cc <DD_scheduler+0x13c>)
 80032da:	f000 ff87 	bl	80041ec <printf>
				dd_task task = queue_message.data;
 80032de:	f107 040c 	add.w	r4, r7, #12
 80032e2:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 80032e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				task.relative_deadline = current_time + task.absolute_deadline;
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032f6:	4413      	add	r3, r2
 80032f8:	623b      	str	r3, [r7, #32]
				task.release_time = current_time;
 80032fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032fc:	61bb      	str	r3, [r7, #24]

				add_task_to_list_by_deadline(task_lists->active_task_list, task);
 80032fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003300:	681d      	ldr	r5, [r3, #0]
 8003302:	466c      	mov	r4, sp
 8003304:	f107 0318 	add.w	r3, r7, #24
 8003308:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800330a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800330e:	f107 030c 	add.w	r3, r7, #12
 8003312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003314:	4628      	mov	r0, r5
 8003316:	f000 fa9c 	bl	8003852 <add_task_to_list_by_deadline>

				vTaskResume(queue_message.data.t_handle);
 800331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fc35 	bl	8001b8c <vTaskResume>
 8003322:	e7bc      	b.n	800329e <DD_scheduler+0xe>
			}
			else if(queue_message.message == complete_dd_task){
 8003324:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003328:	2b01      	cmp	r3, #1
 800332a:	d12a      	bne.n	8003382 <DD_scheduler+0xf2>
				dd_task_list_node* completed_task = remove_task(task_lists->active_task_list, queue_message.data.task_id);
 800332c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fb31 	bl	800399c <remove_task>
 800333a:	64f8      	str	r0, [r7, #76]	; 0x4c

				completed_task->task.completion_time = xTaskGetTickCount() - completed_task->task.release_time ;
 800333c:	f7fe fd78 	bl	8001e30 <xTaskGetTickCount>
 8003340:	4602      	mov	r2, r0
 8003342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	1ad2      	subs	r2, r2, r3
 8003348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800334a:	619a      	str	r2, [r3, #24]
				add_task_to_list(task_lists->complete_task_list, completed_task->task);
 800334c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800334e:	685e      	ldr	r6, [r3, #4]
 8003350:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8003352:	466d      	mov	r5, sp
 8003354:	f104 030c 	add.w	r3, r4, #12
 8003358:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800335a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800335e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003362:	4630      	mov	r0, r6
 8003364:	f000 fae7 	bl	8003936 <add_task_to_list>

				printf(" to complete a task with id %d: took %d\n", queue_message.data.task_id, completed_task->task.completion_time);
 8003368:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800336a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	461a      	mov	r2, r3
 8003370:	4817      	ldr	r0, [pc, #92]	; (80033d0 <DD_scheduler+0x140>)
 8003372:	f000 ff3b 	bl	80041ec <printf>
				vTaskDelete(completed_task->task.t_handle);
 8003376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe f9d4 	bl	8001728 <vTaskDelete>
 8003380:	e78d      	b.n	800329e <DD_scheduler+0xe>
			}
			else if(queue_message.message == get_completed_dd_task_list){
 8003382:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003386:	2b03      	cmp	r3, #3
 8003388:	d105      	bne.n	8003396 <DD_scheduler+0x106>
				print_task_list(task_lists->active_task_list);
 800338a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f000 fb3e 	bl	8003a10 <print_task_list>
 8003394:	e783      	b.n	800329e <DD_scheduler+0xe>
			}
			else if(queue_message.message == get_overdue_dd_task_list){
 8003396:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800339a:	2b04      	cmp	r3, #4
 800339c:	d105      	bne.n	80033aa <DD_scheduler+0x11a>
				print_task_list(task_lists->overdue_task_list);
 800339e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fb34 	bl	8003a10 <print_task_list>
 80033a8:	e779      	b.n	800329e <DD_scheduler+0xe>
			}else {
				fprintf(stderr, "Invalid message type\n");
 80033aa:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <DD_scheduler+0x144>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2215      	movs	r2, #21
 80033b2:	2101      	movs	r1, #1
 80033b4:	4808      	ldr	r0, [pc, #32]	; (80033d8 <DD_scheduler+0x148>)
 80033b6:	f000 ffb1 	bl	800431c <fwrite>
				return;
 80033ba:	bf00      	nop
			}

		}
	}
}
 80033bc:	375c      	adds	r7, #92	; 0x5c
 80033be:	46bd      	mov	sp, r7
 80033c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20007cb4 	.word	0x20007cb4
 80033c8:	08004d7c 	.word	0x08004d7c
 80033cc:	08004da0 	.word	0x08004da0
 80033d0:	08004dc0 	.word	0x08004dc0
 80033d4:	20000018 	.word	0x20000018
 80033d8:	08004dec 	.word	0x08004dec

080033dc <DD_Create_vTask>:

#define period_1 500
#define period_2 500
#define period_3 500

dd_task DD_Create_vTask(TaskHandle_t *task_handle, TaskFunction_t task_function, char *task_name, uint32_t stack_size, void *pvParameters, UBaseType_t uxPriority, int task_id, int deadline){
 80033dc:	b5b0      	push	{r4, r5, r7, lr}
 80033de:	b08e      	sub	sp, #56	; 0x38
 80033e0:	af02      	add	r7, sp, #8
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
    int task_id_computed = task_id;
 80033ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	xTaskCreate(task_function, task_name, stack_size,(void*)task_id_computed , uxPriority, task_handle);
 80033ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	9301      	str	r3, [sp, #4]
 80033f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	460b      	mov	r3, r1
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7fe f85f 	bl	80014c4 <xTaskCreate>
    vTaskSuspend(*task_handle);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fafc 	bl	8001a08 <vTaskSuspend>
    dd_task t = create_dd_task(*task_handle, Periodic, task_id_computed, pdMS_TO_TICKS(deadline));
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8003416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003418:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800341c:	fb02 f303 	mul.w	r3, r2, r3
 8003420:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <DD_Create_vTask+0x78>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	f107 0010 	add.w	r0, r7, #16
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4623      	mov	r3, r4
 8003430:	2200      	movs	r2, #0
 8003432:	f000 f9e6 	bl	8003802 <create_dd_task>
    return t;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	461d      	mov	r5, r3
 800343a:	f107 0410 	add.w	r4, r7, #16
 800343e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003442:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003446:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	3730      	adds	r7, #48	; 0x30
 800344e:	46bd      	mov	sp, r7
 8003450:	bdb0      	pop	{r4, r5, r7, pc}
 8003452:	bf00      	nop
 8003454:	10624dd3 	.word	0x10624dd3

08003458 <DD_Task_Generator_1>:

void DD_Task_Generator_1( void *pvParameters ){
 8003458:	b5b0      	push	{r4, r5, r7, lr}
 800345a:	b09a      	sub	sp, #104	; 0x68
 800345c:	af06      	add	r7, sp, #24
 800345e:	6078      	str	r0, [r7, #4]
    // Create a task
	int task_id = 1001;
 8003460:	f240 33e9 	movw	r3, #1001	; 0x3e9
 8003464:	64fb      	str	r3, [r7, #76]	; 0x4c
    while(1){
    	//printf("Generator: Generating Task 1\n");
        dd_task taskCreated = DD_Create_vTask(&DD_task_1, task_1, "task_1", 130, NULL, 1, task_id++, period_1);
 8003466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800346c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003470:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003474:	9204      	str	r2, [sp, #16]
 8003476:	9303      	str	r3, [sp, #12]
 8003478:	2301      	movs	r3, #1
 800347a:	9302      	str	r3, [sp, #8]
 800347c:	2300      	movs	r3, #0
 800347e:	9301      	str	r3, [sp, #4]
 8003480:	2382      	movs	r3, #130	; 0x82
 8003482:	9300      	str	r3, [sp, #0]
 8003484:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <DD_Task_Generator_1+0x78>)
 8003486:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <DD_Task_Generator_1+0x7c>)
 8003488:	4913      	ldr	r1, [pc, #76]	; (80034d8 <DD_Task_Generator_1+0x80>)
 800348a:	f7ff ffa7 	bl	80033dc <DD_Create_vTask>
        dd_message release_message = {
 800348e:	2300      	movs	r3, #0
 8003490:	733b      	strb	r3, [r7, #12]
 8003492:	f107 0410 	add.w	r4, r7, #16
 8003496:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800349a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800349c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800349e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80034a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            release_dd_task, // message type
            taskCreated, // task data
            xTaskGetCurrentTaskHandle() // task handle
 80034a6:	f7ff f819 	bl	80024dc <xTaskGetCurrentTaskHandle>
 80034aa:	4603      	mov	r3, r0
        dd_message release_message = {
 80034ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        };
        //printf("Generator: Sending Task Message To Scheduler 1\n");
        DD_scheduler_send_message(release_message);
 80034ae:	466d      	mov	r5, sp
 80034b0:	f107 041c 	add.w	r4, r7, #28
 80034b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b8:	6823      	ldr	r3, [r4, #0]
 80034ba:	602b      	str	r3, [r5, #0]
 80034bc:	f107 030c 	add.w	r3, r7, #12
 80034c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034c2:	f7ff fe85 	bl	80031d0 <DD_scheduler_send_message>
        vTaskDelay(pdMS_TO_TICKS(period_1));
 80034c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034ca:	f7fe f9bb 	bl	8001844 <vTaskDelay>
    while(1){
 80034ce:	e7ca      	b.n	8003466 <DD_Task_Generator_1+0xe>
 80034d0:	08004e04 	.word	0x08004e04
 80034d4:	0800354d 	.word	0x0800354d
 80034d8:	20007cc0 	.word	0x20007cc0

080034dc <simulateTaskFor>:
    }
}

void simulateTaskFor(int timeInMS){
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	; 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	TickType_t totalTicks = pdMS_TO_TICKS(timeInMS);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	4a16      	ldr	r2, [pc, #88]	; (8003548 <simulateTaskFor+0x6c>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	61fb      	str	r3, [r7, #28]
	TickType_t doneTime = 0;
 80034f8:	2300      	movs	r3, #0
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
	TickType_t start = xTaskGetTickCount();
 80034fc:	f7fe fc98 	bl	8001e30 <xTaskGetTickCount>
 8003500:	61b8      	str	r0, [r7, #24]
	int a = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
	int b = 2;
 8003506:	2302      	movs	r3, #2
 8003508:	613b      	str	r3, [r7, #16]

	while (doneTime < totalTicks){
 800350a:	e014      	b.n	8003536 <simulateTaskFor+0x5a>

		for(int i=0;i<10000;i++){
 800350c:	2300      	movs	r3, #0
 800350e:	623b      	str	r3, [r7, #32]
 8003510:	e006      	b.n	8003520 <simulateTaskFor+0x44>
			int c = a+b;
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4413      	add	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
		for(int i=0;i<10000;i++){
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	3301      	adds	r3, #1
 800351e:	623b      	str	r3, [r7, #32]
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	f242 720f 	movw	r2, #9999	; 0x270f
 8003526:	4293      	cmp	r3, r2
 8003528:	ddf3      	ble.n	8003512 <simulateTaskFor+0x36>
		}

		doneTime = xTaskGetTickCount() - start;
 800352a:	f7fe fc81 	bl	8001e30 <xTaskGetTickCount>
 800352e:	4602      	mov	r2, r0
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	627b      	str	r3, [r7, #36]	; 0x24
	while (doneTime < totalTicks){
 8003536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	429a      	cmp	r2, r3
 800353c:	d3e6      	bcc.n	800350c <simulateTaskFor+0x30>
	}
}
 800353e:	bf00      	nop
 8003540:	3728      	adds	r7, #40	; 0x28
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	10624dd3 	.word	0x10624dd3

0800354c <task_1>:

void task_1 ( void *pvParameters ){
 800354c:	b5b0      	push	{r4, r5, r7, lr}
 800354e:	b09a      	sub	sp, #104	; 0x68
 8003550:	af06      	add	r7, sp, #24
 8003552:	6078      	str	r0, [r7, #4]
	int taskID = (int)pvParameters;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(1){

		simulateTaskFor(execution_time_task_1);
 8003558:	20c8      	movs	r0, #200	; 0xc8
 800355a:	f7ff ffbf 	bl	80034dc <simulateTaskFor>

		dd_task d;
		d.task_id = taskID;
 800355e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
		dd_message complete_message = {
 8003562:	2301      	movs	r3, #1
 8003564:	733b      	strb	r3, [r7, #12]
 8003566:	f107 0410 	add.w	r4, r7, #16
 800356a:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800356e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				complete_dd_task, // message type
		        d, // task data
		        xTaskGetCurrentTaskHandle() // task handle
 800357a:	f7fe ffaf 	bl	80024dc <xTaskGetCurrentTaskHandle>
 800357e:	4603      	mov	r3, r0
		dd_message complete_message = {
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
		};

		//printf("Task 1: Task completed processing %d\n", taskID);
		DD_scheduler_send_message(complete_message);
 8003582:	466d      	mov	r5, sp
 8003584:	f107 041c 	add.w	r4, r7, #28
 8003588:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800358a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	602b      	str	r3, [r5, #0]
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003596:	f7ff fe1b 	bl	80031d0 <DD_scheduler_send_message>

		vTaskDelay(10000);
 800359a:	f242 7010 	movw	r0, #10000	; 0x2710
 800359e:	f7fe f951 	bl	8001844 <vTaskDelay>
	while(1){
 80035a2:	e7d9      	b.n	8003558 <task_1+0xc>

080035a4 <DD_Task_Generator_2>:
	}
}

void DD_Task_Generator_2( void *pvParameters ){
 80035a4:	b5b0      	push	{r4, r5, r7, lr}
 80035a6:	b09a      	sub	sp, #104	; 0x68
 80035a8:	af06      	add	r7, sp, #24
 80035aa:	6078      	str	r0, [r7, #4]
    // Create a task
	int task_id = 2001;
 80035ac:	f240 73d1 	movw	r3, #2001	; 0x7d1
 80035b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    while(1){
    	//printf("Generator: Generating Task 2\n");
        dd_task taskCreated = DD_Create_vTask(&DD_task_2, task_2, "task_2", 130, NULL, 1, task_id++, period_2);
 80035b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80035b8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80035bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80035c0:	9204      	str	r2, [sp, #16]
 80035c2:	9303      	str	r3, [sp, #12]
 80035c4:	2301      	movs	r3, #1
 80035c6:	9302      	str	r3, [sp, #8]
 80035c8:	2300      	movs	r3, #0
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	2382      	movs	r3, #130	; 0x82
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	4b12      	ldr	r3, [pc, #72]	; (800361c <DD_Task_Generator_2+0x78>)
 80035d2:	4a13      	ldr	r2, [pc, #76]	; (8003620 <DD_Task_Generator_2+0x7c>)
 80035d4:	4913      	ldr	r1, [pc, #76]	; (8003624 <DD_Task_Generator_2+0x80>)
 80035d6:	f7ff ff01 	bl	80033dc <DD_Create_vTask>
        dd_message release_message = {
 80035da:	2300      	movs	r3, #0
 80035dc:	733b      	strb	r3, [r7, #12]
 80035de:	f107 0410 	add.w	r4, r7, #16
 80035e2:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80035e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80035ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            release_dd_task, // message type
            taskCreated, // task data
            xTaskGetCurrentTaskHandle() // task handle
 80035f2:	f7fe ff73 	bl	80024dc <xTaskGetCurrentTaskHandle>
 80035f6:	4603      	mov	r3, r0
        dd_message release_message = {
 80035f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        };

        //printf("Generator: Sending Task Message To Scheduler 2\n");

        DD_scheduler_send_message(release_message);
 80035fa:	466d      	mov	r5, sp
 80035fc:	f107 041c 	add.w	r4, r7, #28
 8003600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003604:	6823      	ldr	r3, [r4, #0]
 8003606:	602b      	str	r3, [r5, #0]
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800360e:	f7ff fddf 	bl	80031d0 <DD_scheduler_send_message>

        vTaskDelay(pdMS_TO_TICKS(period_2));
 8003612:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003616:	f7fe f915 	bl	8001844 <vTaskDelay>
    while(1){
 800361a:	e7ca      	b.n	80035b2 <DD_Task_Generator_2+0xe>
 800361c:	08004e0c 	.word	0x08004e0c
 8003620:	08003629 	.word	0x08003629
 8003624:	20007cbc 	.word	0x20007cbc

08003628 <task_2>:
    }
}



void task_2 ( void *pvParameters ){
 8003628:	b5b0      	push	{r4, r5, r7, lr}
 800362a:	b09a      	sub	sp, #104	; 0x68
 800362c:	af06      	add	r7, sp, #24
 800362e:	6078      	str	r0, [r7, #4]
	int taskID = (int)pvParameters;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(1){
		simulateTaskFor(execution_time_task_2);
 8003634:	20c8      	movs	r0, #200	; 0xc8
 8003636:	f7ff ff51 	bl	80034dc <simulateTaskFor>
		dd_task d;
		d.task_id = taskID;
 800363a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800363c:	63bb      	str	r3, [r7, #56]	; 0x38
		dd_message complete_message = {
 800363e:	2301      	movs	r3, #1
 8003640:	733b      	strb	r3, [r7, #12]
 8003642:	f107 0410 	add.w	r4, r7, #16
 8003646:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800364a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800364c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800364e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				complete_dd_task, // message type
		        d, // task data
		        xTaskGetCurrentTaskHandle() // task handle
 8003656:	f7fe ff41 	bl	80024dc <xTaskGetCurrentTaskHandle>
 800365a:	4603      	mov	r3, r0
		dd_message complete_message = {
 800365c:	62fb      	str	r3, [r7, #44]	; 0x2c
		};

		//printf("Task 2: Task completed processing %d\n", taskID);
		DD_scheduler_send_message(complete_message);
 800365e:	466d      	mov	r5, sp
 8003660:	f107 041c 	add.w	r4, r7, #28
 8003664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	602b      	str	r3, [r5, #0]
 800366c:	f107 030c 	add.w	r3, r7, #12
 8003670:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003672:	f7ff fdad 	bl	80031d0 <DD_scheduler_send_message>
		vTaskDelay(10000);
 8003676:	f242 7010 	movw	r0, #10000	; 0x2710
 800367a:	f7fe f8e3 	bl	8001844 <vTaskDelay>
	while(1){
 800367e:	e7d9      	b.n	8003634 <task_2+0xc>

08003680 <DD_Task_Generator_3>:
	}
}

void DD_Task_Generator_3( void *pvParameters ){
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	b09a      	sub	sp, #104	; 0x68
 8003684:	af06      	add	r7, sp, #24
 8003686:	6078      	str	r0, [r7, #4]
    // Create a task
	int task_id = 3001;
 8003688:	f640 33b9 	movw	r3, #3001	; 0xbb9
 800368c:	64fb      	str	r3, [r7, #76]	; 0x4c
    while(1){
    	//printf("Generator: Generating Task 3\n");
        dd_task taskCreated = DD_Create_vTask(&DD_task_3, task_3, "task_3", 130, NULL, 1, task_id++, period_3);
 800368e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003694:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8003698:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800369c:	9204      	str	r2, [sp, #16]
 800369e:	9303      	str	r3, [sp, #12]
 80036a0:	2301      	movs	r3, #1
 80036a2:	9302      	str	r3, [sp, #8]
 80036a4:	2300      	movs	r3, #0
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	2382      	movs	r3, #130	; 0x82
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <DD_Task_Generator_3+0x78>)
 80036ae:	4a13      	ldr	r2, [pc, #76]	; (80036fc <DD_Task_Generator_3+0x7c>)
 80036b0:	4913      	ldr	r1, [pc, #76]	; (8003700 <DD_Task_Generator_3+0x80>)
 80036b2:	f7ff fe93 	bl	80033dc <DD_Create_vTask>
        dd_message release_message = {
 80036b6:	2300      	movs	r3, #0
 80036b8:	733b      	strb	r3, [r7, #12]
 80036ba:	f107 0410 	add.w	r4, r7, #16
 80036be:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80036c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            release_dd_task, // message type
            taskCreated, // task data
            xTaskGetCurrentTaskHandle()
 80036ce:	f7fe ff05 	bl	80024dc <xTaskGetCurrentTaskHandle>
 80036d2:	4603      	mov	r3, r0
        dd_message release_message = {
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        };

        //printf("Generator: Sending Task release message To Scheduler 3\n");

        DD_scheduler_send_message(release_message);
 80036d6:	466d      	mov	r5, sp
 80036d8:	f107 041c 	add.w	r4, r7, #28
 80036dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	602b      	str	r3, [r5, #0]
 80036e4:	f107 030c 	add.w	r3, r7, #12
 80036e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ea:	f7ff fd71 	bl	80031d0 <DD_scheduler_send_message>

        vTaskDelay(pdMS_TO_TICKS(period_3));
 80036ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80036f2:	f7fe f8a7 	bl	8001844 <vTaskDelay>
    while(1){
 80036f6:	e7ca      	b.n	800368e <DD_Task_Generator_3+0xe>
 80036f8:	08004e14 	.word	0x08004e14
 80036fc:	08003705 	.word	0x08003705
 8003700:	20007cb8 	.word	0x20007cb8

08003704 <task_3>:
    }
}

void task_3 ( void *pvParameters ){
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b09a      	sub	sp, #104	; 0x68
 8003708:	af06      	add	r7, sp, #24
 800370a:	6078      	str	r0, [r7, #4]
	int taskID = (int)pvParameters;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
	while(1){
		simulateTaskFor(execution_time_task_3);
 8003710:	20c8      	movs	r0, #200	; 0xc8
 8003712:	f7ff fee3 	bl	80034dc <simulateTaskFor>
		dd_task d;
		d.task_id = taskID;
 8003716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003718:	63bb      	str	r3, [r7, #56]	; 0x38
		dd_message complete_message = {
 800371a:	2301      	movs	r3, #1
 800371c:	733b      	strb	r3, [r7, #12]
 800371e:	f107 0410 	add.w	r4, r7, #16
 8003722:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8003726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800372a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800372e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				complete_dd_task, // message type
		        d, // task data
		        xTaskGetCurrentTaskHandle() // task handle
 8003732:	f7fe fed3 	bl	80024dc <xTaskGetCurrentTaskHandle>
 8003736:	4603      	mov	r3, r0
		dd_message complete_message = {
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
		};

		//printf("Task 3: Task completed processing %d\n", taskID);
		DD_scheduler_send_message(complete_message);
 800373a:	466d      	mov	r5, sp
 800373c:	f107 041c 	add.w	r4, r7, #28
 8003740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	f107 030c 	add.w	r3, r7, #12
 800374c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800374e:	f7ff fd3f 	bl	80031d0 <DD_scheduler_send_message>
		vTaskDelay(10000);
 8003752:	f242 7010 	movw	r0, #10000	; 0x2710
 8003756:	f7fe f875 	bl	8001844 <vTaskDelay>
	while(1){
 800375a:	e7d9      	b.n	8003710 <task_3+0xc>

0800375c <init_task_lists>:
#include <stdio.h>
#include <stdlib.h>

void arrangeTaskPriorities(dd_task_list* task_list);

dd_task_lists* init_task_lists(void){
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
    dd_task_lists *task_lists = (dd_task_lists*)malloc(sizeof(dd_task_lists));
 8003762:	2010      	movs	r0, #16
 8003764:	f000 fe0c 	bl	8004380 <malloc>
 8003768:	4603      	mov	r3, r0
 800376a:	607b      	str	r3, [r7, #4]

    task_lists->active_task_list = (dd_task_list*)malloc(sizeof(dd_task_list));
 800376c:	2018      	movs	r0, #24
 800376e:	f000 fe07 	bl	8004380 <malloc>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	601a      	str	r2, [r3, #0]
    task_lists->active_task_list->head = NULL;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	615a      	str	r2, [r3, #20]

    task_lists->complete_task_list = (dd_task_list*)malloc(sizeof(dd_task_list));
 8003782:	2018      	movs	r0, #24
 8003784:	f000 fdfc 	bl	8004380 <malloc>
 8003788:	4603      	mov	r3, r0
 800378a:	461a      	mov	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	605a      	str	r2, [r3, #4]
    task_lists->complete_task_list->head = NULL;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	615a      	str	r2, [r3, #20]

    task_lists->overdue_task_list = (dd_task_list*)malloc(sizeof(dd_task_list));
 8003798:	2018      	movs	r0, #24
 800379a:	f000 fdf1 	bl	8004380 <malloc>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	609a      	str	r2, [r3, #8]
    task_lists->overdue_task_list->head = NULL;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	2200      	movs	r2, #0
 80037ac:	615a      	str	r2, [r3, #20]

    task_lists->current_task = NULL;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	60da      	str	r2, [r3, #12]

    return task_lists;
 80037b4:	687b      	ldr	r3, [r7, #4]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <init_task_list_node>:

dd_task_list_node* init_task_list_node(dd_task task){
 80037be:	b084      	sub	sp, #16
 80037c0:	b5b0      	push	{r4, r5, r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	f107 0418 	add.w	r4, r7, #24
 80037ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dd_task_list_node *task_list = (dd_task_list_node*)malloc(sizeof(dd_task_list_node));
 80037ce:	2020      	movs	r0, #32
 80037d0:	f000 fdd6 	bl	8004380 <malloc>
 80037d4:	4603      	mov	r3, r0
 80037d6:	607b      	str	r3, [r7, #4]
    task_list->task = task;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	461c      	mov	r4, r3
 80037dc:	f107 0518 	add.w	r5, r7, #24
 80037e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80037e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80037e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80037e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    task_list->next = NULL;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
    return task_list;
 80037f2:	687b      	ldr	r3, [r7, #4]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80037fe:	b004      	add	sp, #16
 8003800:	4770      	bx	lr

08003802 <create_dd_task>:

dd_task create_dd_task(TaskHandle_t t_handle, task_type type, uint32_t task_id, uint32_t absolute_deadline){
 8003802:	b4b0      	push	{r4, r5, r7}
 8003804:	b08d      	sub	sp, #52	; 0x34
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	603b      	str	r3, [r7, #0]
 800380e:	4613      	mov	r3, r2
 8003810:	71fb      	strb	r3, [r7, #7]
    dd_task task;
    task.t_handle = t_handle;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	617b      	str	r3, [r7, #20]
    task.type = type;
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	763b      	strb	r3, [r7, #24]
    task.task_id = task_id;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	61fb      	str	r3, [r7, #28]
    task.absolute_deadline = absolute_deadline;
 800381e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
    task.release_time = -1;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	623b      	str	r3, [r7, #32]
    task.relative_deadline = -1;
 8003828:	f04f 33ff 	mov.w	r3, #4294967295
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
    task.completion_time = -1;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295
 8003832:	62fb      	str	r3, [r7, #44]	; 0x2c
    return task;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	461d      	mov	r5, r3
 8003838:	f107 0414 	add.w	r4, r7, #20
 800383c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800383e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003840:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003844:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	3734      	adds	r7, #52	; 0x34
 800384c:	46bd      	mov	sp, r7
 800384e:	bcb0      	pop	{r4, r5, r7}
 8003850:	4770      	bx	lr

08003852 <add_task_to_list_by_deadline>:

void add_task_to_list_by_deadline(dd_task_list* task_list, dd_task task){
 8003852:	b084      	sub	sp, #16
 8003854:	b590      	push	{r4, r7, lr}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af04      	add	r7, sp, #16
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003860:	e880 000e 	stmia.w	r0, {r1, r2, r3}

    dd_task_list_node *task_node = init_task_list_node(task);
 8003864:	466c      	mov	r4, sp
 8003866:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800386a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800386e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003876:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003878:	f7ff ffa1 	bl	80037be <init_task_list_node>
 800387c:	60b8      	str	r0, [r7, #8]

    if(task_list->head == NULL){
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d103      	bne.n	800388e <add_task_to_list_by_deadline+0x3c>
        task_list->head = task_node;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	615a      	str	r2, [r3, #20]
 800388c:	e02c      	b.n	80038e8 <add_task_to_list_by_deadline+0x96>
    } else {

        dd_task_list_node *current_node = task_list->head;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	60fb      	str	r3, [r7, #12]

        //If the front of the list needs to be replaced
        if(current_node->task.relative_deadline > task_node->task.relative_deadline){
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	429a      	cmp	r2, r3
 800389e:	d909      	bls.n	80038b4 <add_task_to_list_by_deadline+0x62>
            task_node->next = current_node;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	61da      	str	r2, [r3, #28]
            task_list->head = task_node;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	615a      	str	r2, [r3, #20]
            return;
 80038ac:	e01f      	b.n	80038ee <add_task_to_list_by_deadline+0x9c>
        }

        // add to the list based on the absolute deadline
        while(current_node->next != NULL && current_node->next->task.relative_deadline < task_node->task.relative_deadline){
            current_node = current_node->next;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	60fb      	str	r3, [r7, #12]
        while(current_node->next != NULL && current_node->next->task.relative_deadline < task_node->task.relative_deadline){
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	69db      	ldr	r3, [r3, #28]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d006      	beq.n	80038ca <add_task_to_list_by_deadline+0x78>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d3f1      	bcc.n	80038ae <add_task_to_list_by_deadline+0x5c>
        }

        if(current_node->next == NULL){
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d103      	bne.n	80038da <add_task_to_list_by_deadline+0x88>
            current_node->next = task_node;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	61da      	str	r2, [r3, #28]
 80038d8:	e006      	b.n	80038e8 <add_task_to_list_by_deadline+0x96>
        } else {
            task_node->next = current_node->next;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	61da      	str	r2, [r3, #28]
            current_node->next = task_node;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	61da      	str	r2, [r3, #28]
        }

    }
    arrangeTaskPriorities(task_list);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f806 	bl	80038fa <arrangeTaskPriorities>
}
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80038f6:	b004      	add	sp, #16
 80038f8:	4770      	bx	lr

080038fa <arrangeTaskPriorities>:

void arrangeTaskPriorities(dd_task_list* task_list){
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
	dd_task_list_node* current = task_list->head;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	60fb      	str	r3, [r7, #12]
	int taskPriority = 20;
 8003908:	2314      	movs	r3, #20
 800390a:	60bb      	str	r3, [r7, #8]
	while(current != NULL){
 800390c:	e00c      	b.n	8003928 <arrangeTaskPriorities+0x2e>
		vTaskPrioritySet(current->task.t_handle, taskPriority);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f7fd ffc8 	bl	80018ac <vTaskPrioritySet>
		current = current->next;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	60fb      	str	r3, [r7, #12]
		taskPriority--;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	3b01      	subs	r3, #1
 8003926:	60bb      	str	r3, [r7, #8]
	while(current != NULL){
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1ef      	bne.n	800390e <arrangeTaskPriorities+0x14>
	}
}
 800392e:	bf00      	nop
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <add_task_to_list>:

void add_task_to_list(dd_task_list* task_list, dd_task task){
 8003936:	b084      	sub	sp, #16
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af04      	add	r7, sp, #16
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003944:	e880 000e 	stmia.w	r0, {r1, r2, r3}

    dd_task_list_node *task_node = init_task_list_node(task);
 8003948:	466c      	mov	r4, sp
 800394a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800394e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003952:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800395c:	f7ff ff2f 	bl	80037be <init_task_list_node>
 8003960:	60b8      	str	r0, [r7, #8]

    if(task_list->head == NULL){
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d103      	bne.n	8003972 <add_task_to_list+0x3c>
        task_list->head = task_node;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	615a      	str	r2, [r3, #20]
        while(current_node->next != NULL){
            current_node = current_node->next;
        }
        current_node->next = task_node;
    }
}
 8003970:	e00d      	b.n	800398e <add_task_to_list+0x58>
        dd_task_list_node *current_node = task_list->head;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	60fb      	str	r3, [r7, #12]
        while(current_node->next != NULL){
 8003978:	e002      	b.n	8003980 <add_task_to_list+0x4a>
            current_node = current_node->next;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	60fb      	str	r3, [r7, #12]
        while(current_node->next != NULL){
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1f8      	bne.n	800397a <add_task_to_list+0x44>
        current_node->next = task_node;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	61da      	str	r2, [r3, #28]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003998:	b004      	add	sp, #16
 800399a:	4770      	bx	lr

0800399c <remove_task>:

dd_task_list_node* remove_task(dd_task_list* task_list, uint32_t task_id){
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]

    dd_task_list_node *current_node = task_list->head;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	60fb      	str	r3, [r7, #12]

    if(current_node->task.task_id == task_id){
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d118      	bne.n	80039e8 <remove_task+0x4c>
        task_list->head = current_node->next;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	69da      	ldr	r2, [r3, #28]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	615a      	str	r2, [r3, #20]
        return current_node;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	e01e      	b.n	8003a00 <remove_task+0x64>
    }

    while(current_node->next != NULL){
        if(current_node->next->task.task_id == task_id){
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d109      	bne.n	80039e2 <remove_task+0x46>
            dd_task_list_node *temp = current_node->next;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	60bb      	str	r3, [r7, #8]
            current_node->next = current_node->next->next;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	61da      	str	r2, [r3, #28]
            return temp;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	e00e      	b.n	8003a00 <remove_task+0x64>
        }
        current_node = current_node->next;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	60fb      	str	r3, [r7, #12]
    while(current_node->next != NULL){
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1e8      	bne.n	80039c2 <remove_task+0x26>
    }

    fputs("Task not found in active task list", stderr);
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <remove_task+0x6c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2222      	movs	r2, #34	; 0x22
 80039f8:	2101      	movs	r1, #1
 80039fa:	4804      	ldr	r0, [pc, #16]	; (8003a0c <remove_task+0x70>)
 80039fc:	f000 fc8e 	bl	800431c <fwrite>
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000018 	.word	0x20000018
 8003a0c:	08004e1c 	.word	0x08004e1c

08003a10 <print_task_list>:
    }else{
        return (current_node->task);
    }
}

void print_task_list(dd_task_list* task_list){
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
    dd_task_list_node *current_node = task_list->head;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	60fb      	str	r3, [r7, #12]
    while(current_node != NULL){
 8003a1e:	e007      	b.n	8003a30 <print_task_list+0x20>
        printf("Task ID: %lu, Absolute Deadline: %lu\n", current_node->task.task_id, current_node->task.absolute_deadline);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6899      	ldr	r1, [r3, #8]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	4805      	ldr	r0, [pc, #20]	; (8003a40 <print_task_list+0x30>)
 8003a2c:	f000 fbde 	bl	80041ec <printf>
    while(current_node != NULL){
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f4      	bne.n	8003a20 <print_task_list+0x10>
    }
}
 8003a36:	bf00      	nop
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	08004e40 	.word	0x08004e40

08003a44 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003a4e:	bf00      	nop
}
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <NVIC_SetPriorityGrouping+0x44>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8003a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a9e:	4a04      	ldr	r2, [pc, #16]	; (8003ab0 <NVIC_SetPriorityGrouping+0x44>)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	60d3      	str	r3, [r2, #12]
}
 8003aa4:	bf00      	nop
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <main>:
 * that was not already performed before main() was called.
 */
static void prvSetupHardware( void );

int main(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af02      	add	r7, sp, #8
	prvSetupHardware();
 8003aba:	f000 f860 	bl	8003b7e <prvSetupHardware>
	int maxPriority = 30;
 8003abe:	231e      	movs	r3, #30
 8003ac0:	607b      	str	r3, [r7, #4]
	DD_scheduler_initialize();
 8003ac2:	f7ff fb65 	bl	8003190 <DD_scheduler_initialize>
	xTaskCreate(DD_scheduler, "Scheduler_Task", 130, NULL, maxPriority-1, NULL);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	461a      	mov	r2, r3
 8003acc:	2300      	movs	r3, #0
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	9200      	str	r2, [sp, #0]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2282      	movs	r2, #130	; 0x82
 8003ad6:	4917      	ldr	r1, [pc, #92]	; (8003b34 <main+0x80>)
 8003ad8:	4817      	ldr	r0, [pc, #92]	; (8003b38 <main+0x84>)
 8003ada:	f7fd fcf3 	bl	80014c4 <xTaskCreate>
	xTaskCreate(DD_Task_Generator_1, "Generator1", 130, NULL, maxPriority-2, NULL);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3b02      	subs	r3, #2
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	9200      	str	r2, [sp, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	2282      	movs	r2, #130	; 0x82
 8003aee:	4913      	ldr	r1, [pc, #76]	; (8003b3c <main+0x88>)
 8003af0:	4813      	ldr	r0, [pc, #76]	; (8003b40 <main+0x8c>)
 8003af2:	f7fd fce7 	bl	80014c4 <xTaskCreate>
	xTaskCreate(DD_Task_Generator_2, "Generator2", 130, NULL, maxPriority-2, NULL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3b02      	subs	r3, #2
 8003afa:	461a      	mov	r2, r3
 8003afc:	2300      	movs	r3, #0
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	9200      	str	r2, [sp, #0]
 8003b02:	2300      	movs	r3, #0
 8003b04:	2282      	movs	r2, #130	; 0x82
 8003b06:	490f      	ldr	r1, [pc, #60]	; (8003b44 <main+0x90>)
 8003b08:	480f      	ldr	r0, [pc, #60]	; (8003b48 <main+0x94>)
 8003b0a:	f7fd fcdb 	bl	80014c4 <xTaskCreate>
	xTaskCreate(DD_Task_Generator_3, "Generator3", 130, NULL, maxPriority-2, NULL);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3b02      	subs	r3, #2
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	9200      	str	r2, [sp, #0]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	2282      	movs	r2, #130	; 0x82
 8003b1e:	490b      	ldr	r1, [pc, #44]	; (8003b4c <main+0x98>)
 8003b20:	480b      	ldr	r0, [pc, #44]	; (8003b50 <main+0x9c>)
 8003b22:	f7fd fccf 	bl	80014c4 <xTaskCreate>

	vTaskStartScheduler();
 8003b26:	f7fe f88d 	bl	8001c44 <vTaskStartScheduler>

	return 0;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	08004e68 	.word	0x08004e68
 8003b38:	08003291 	.word	0x08003291
 8003b3c:	08004e78 	.word	0x08004e78
 8003b40:	08003459 	.word	0x08003459
 8003b44:	08004e84 	.word	0x08004e84
 8003b48:	080035a5 	.word	0x080035a5
 8003b4c:	08004e90 	.word	0x08004e90
 8003b50:	08003681 	.word	0x08003681

08003b54 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8003b58:	e7fe      	b.n	8003b58 <vApplicationMallocFailedHook+0x4>

08003b5a <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003b64:	e7fe      	b.n	8003b64 <vApplicationStackOverflowHook+0xa>

08003b66 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003b6c:	f7fc ff16 	bl	800099c <xPortGetFreeHeapSize>
 8003b70:	4603      	mov	r3, r0
 8003b72:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8003b74:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8003b82:	2000      	movs	r0, #0
 8003b84:	f7ff ff72 	bl	8003a6c <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 8003b88:	bf00      	nop
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b8e:	e003      	b.n	8003b98 <LoopCopyDataInit>

08003b90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003b92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b96:	3104      	adds	r1, #4

08003b98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b98:	480a      	ldr	r0, [pc, #40]	; (8003bc4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003b9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ba0:	d3f6      	bcc.n	8003b90 <CopyDataInit>
  ldr  r2, =_sbss
 8003ba2:	4a0a      	ldr	r2, [pc, #40]	; (8003bcc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003ba4:	e002      	b.n	8003bac <LoopFillZerobss>

08003ba6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ba6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ba8:	f842 3b04 	str.w	r3, [r2], #4

08003bac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bac:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003bae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003bb0:	d3f9      	bcc.n	8003ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003bb2:	f000 f8f3 	bl	8003d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003bb6:	f000 fbbf 	bl	8004338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bba:	f7ff ff7b 	bl	8003ab4 <main>
  bx  lr    
 8003bbe:	4770      	bx	lr
  ldr  r3, =_sidata
 8003bc0:	08004f20 	.word	0x08004f20
  ldr  r0, =_sdata
 8003bc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bc8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003bcc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003bd0:	20007cc8 	.word	0x20007cc8

08003bd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bd4:	e7fe      	b.n	8003bd4 <ADC_IRQHandler>

08003bd6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0
}
 8003bda:	bf00      	nop
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003be8:	e7fe      	b.n	8003be8 <HardFault_Handler+0x4>

08003bea <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003bea:	b480      	push	{r7}
 8003bec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003bee:	e7fe      	b.n	8003bee <MemManage_Handler+0x4>

08003bf0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003bf4:	e7fe      	b.n	8003bf4 <BusFault_Handler+0x4>

08003bf6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003bfa:	e7fe      	b.n	8003bfa <UsageFault_Handler+0x4>

08003bfc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
}
 8003c00:	bf00      	nop
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <ITM_SendChar+0x58>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01a      	beq.n	8003c56 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003c20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c24:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003c28:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d012      	beq.n	8003c56 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8003c30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c34:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003c38:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8003c40:	bf00      	nop
 8003c42:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0fa      	beq.n	8003c42 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003c4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003c56:	687b      	ldr	r3, [r7, #4]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000edf0 	.word	0xe000edf0

08003c68 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e009      	b.n	8003c92 <_write+0x2a>
	 ITM_SendChar((*ptr++));
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	60ba      	str	r2, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff ffc0 	bl	8003c0c <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	3301      	adds	r3, #1
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	dbf1      	blt.n	8003c7e <_write+0x16>
 return len;
 8003c9a:	687b      	ldr	r3, [r7, #4]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <_sbrk>:


void * _sbrk(int32_t incr)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003cac:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <_sbrk+0x38>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d102      	bne.n	8003cba <_sbrk+0x16>
		heap_end = & end;
 8003cb4:	4b09      	ldr	r3, [pc, #36]	; (8003cdc <_sbrk+0x38>)
 8003cb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ce0 <_sbrk+0x3c>)
 8003cb8:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <_sbrk+0x38>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003cc0:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <_sbrk+0x38>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	4a04      	ldr	r2, [pc, #16]	; (8003cdc <_sbrk+0x38>)
 8003cca:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20007bec 	.word	0x20007bec
 8003ce0:	20007cc8 	.word	0x20007cc8

08003ce4 <_close>:

int _close(int32_t file)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <_close+0x20>)
 8003cee:	2258      	movs	r2, #88	; 0x58
 8003cf0:	601a      	str	r2, [r3, #0]
	return -1;
 8003cf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	20007cc4 	.word	0x20007cc4

08003d08 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <_fstat+0x20>)
 8003d14:	2258      	movs	r2, #88	; 0x58
 8003d16:	601a      	str	r2, [r3, #0]
	return -1;
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	20007cc4 	.word	0x20007cc4

08003d2c <_isatty>:

int _isatty(int32_t file)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <_isatty+0x1c>)
 8003d36:	2258      	movs	r2, #88	; 0x58
 8003d38:	601a      	str	r2, [r3, #0]
	return 0;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	20007cc4 	.word	0x20007cc4

08003d4c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <_lseek+0x24>)
 8003d5a:	2258      	movs	r2, #88	; 0x58
 8003d5c:	601a      	str	r2, [r3, #0]
	return -1;
 8003d5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20007cc4 	.word	0x20007cc4

08003d74 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <_read+0x24>)
 8003d82:	2258      	movs	r2, #88	; 0x58
 8003d84:	601a      	str	r2, [r3, #0]
	return -1;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20007cc4 	.word	0x20007cc4

08003d9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003da0:	4a16      	ldr	r2, [pc, #88]	; (8003dfc <SystemInit+0x60>)
 8003da2:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <SystemInit+0x60>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003db0:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <SystemInit+0x64>)
 8003db2:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <SystemInit+0x64>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003dbc:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <SystemInit+0x64>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003dc2:	4a0f      	ldr	r2, [pc, #60]	; (8003e00 <SystemInit+0x64>)
 8003dc4:	4b0e      	ldr	r3, [pc, #56]	; (8003e00 <SystemInit+0x64>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <SystemInit+0x64>)
 8003dd4:	4a0b      	ldr	r2, [pc, #44]	; (8003e04 <SystemInit+0x68>)
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003dd8:	4a09      	ldr	r2, [pc, #36]	; (8003e00 <SystemInit+0x64>)
 8003dda:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <SystemInit+0x64>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003de2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <SystemInit+0x64>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003dea:	f000 f80d 	bl	8003e08 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dee:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <SystemInit+0x60>)
 8003df0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003df4:	609a      	str	r2, [r3, #8]
#endif
}
 8003df6:	bf00      	nop
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	e000ed00 	.word	0xe000ed00
 8003e00:	40023800 	.word	0x40023800
 8003e04:	24003010 	.word	0x24003010

08003e08 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	2300      	movs	r3, #0
 8003e14:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003e16:	4a36      	ldr	r2, [pc, #216]	; (8003ef0 <SetSysClock+0xe8>)
 8003e18:	4b35      	ldr	r3, [pc, #212]	; (8003ef0 <SetSysClock+0xe8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003e22:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <SetSysClock+0xe8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <SetSysClock+0x38>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003e3e:	d1f0      	bne.n	8003e22 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003e40:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <SetSysClock+0xe8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	e001      	b.n	8003e56 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003e52:	2300      	movs	r3, #0
 8003e54:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d142      	bne.n	8003ee2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003e5c:	4a24      	ldr	r2, [pc, #144]	; (8003ef0 <SetSysClock+0xe8>)
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <SetSysClock+0xe8>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e66:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003e68:	4a22      	ldr	r2, [pc, #136]	; (8003ef4 <SetSysClock+0xec>)
 8003e6a:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <SetSysClock+0xec>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e72:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003e74:	4a1e      	ldr	r2, [pc, #120]	; (8003ef0 <SetSysClock+0xe8>)
 8003e76:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <SetSysClock+0xe8>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003e7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <SetSysClock+0xe8>)
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <SetSysClock+0xe8>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e86:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003e88:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <SetSysClock+0xe8>)
 8003e8a:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <SetSysClock+0xe8>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003e92:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <SetSysClock+0xe8>)
 8003e96:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <SetSysClock+0xf0>)
 8003e98:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003e9a:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <SetSysClock+0xe8>)
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <SetSysClock+0xe8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003ea6:	bf00      	nop
 8003ea8:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <SetSysClock+0xe8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f9      	beq.n	8003ea8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003eb4:	4b11      	ldr	r3, [pc, #68]	; (8003efc <SetSysClock+0xf4>)
 8003eb6:	f240 6205 	movw	r2, #1541	; 0x605
 8003eba:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003ebc:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <SetSysClock+0xe8>)
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <SetSysClock+0xe8>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 0303 	bic.w	r3, r3, #3
 8003ec6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003ec8:	4a09      	ldr	r2, [pc, #36]	; (8003ef0 <SetSysClock+0xe8>)
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <SetSysClock+0xe8>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f043 0302 	orr.w	r3, r3, #2
 8003ed2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003ed4:	bf00      	nop
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <SetSysClock+0xe8>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d1f9      	bne.n	8003ed6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003ee2:	bf00      	nop
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000
 8003ef8:	07405408 	.word	0x07405408
 8003efc:	40023c00 	.word	0x40023c00

08003f00 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003f10:	e004      	b.n	8003f1c <ts_itoa+0x1c>
		div *= base;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d2f3      	bcs.n	8003f12 <ts_itoa+0x12>

	while (div != 0)
 8003f2a:	e029      	b.n	8003f80 <ts_itoa+0x80>
	{
		int num = d/div;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f34:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f3e:	fb02 f201 	mul.w	r2, r2, r1
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003f4e:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b09      	cmp	r3, #9
 8003f54:	dd0a      	ble.n	8003f6c <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	6011      	str	r1, [r2, #0]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	3237      	adds	r2, #55	; 0x37
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e009      	b.n	8003f80 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	1c59      	adds	r1, r3, #1
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	6011      	str	r1, [r2, #0]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	3230      	adds	r2, #48	; 0x30
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1d2      	bne.n	8003f2c <ts_itoa+0x2c>
	}
}
 8003f86:	bf00      	nop
 8003f88:	371c      	adds	r7, #28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b088      	sub	sp, #32
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003fa2:	e07d      	b.n	80040a0 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b25      	cmp	r3, #37	; 0x25
 8003faa:	d171      	bne.n	8004090 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d01e      	beq.n	8003ff8 <ts_formatstring+0x66>
 8003fba:	2b64      	cmp	r3, #100	; 0x64
 8003fbc:	dc06      	bgt.n	8003fcc <ts_formatstring+0x3a>
 8003fbe:	2b58      	cmp	r3, #88	; 0x58
 8003fc0:	d050      	beq.n	8004064 <ts_formatstring+0xd2>
 8003fc2:	2b63      	cmp	r3, #99	; 0x63
 8003fc4:	d00e      	beq.n	8003fe4 <ts_formatstring+0x52>
 8003fc6:	2b25      	cmp	r3, #37	; 0x25
 8003fc8:	d058      	beq.n	800407c <ts_formatstring+0xea>
 8003fca:	e05d      	b.n	8004088 <ts_formatstring+0xf6>
 8003fcc:	2b73      	cmp	r3, #115	; 0x73
 8003fce:	d02b      	beq.n	8004028 <ts_formatstring+0x96>
 8003fd0:	2b73      	cmp	r3, #115	; 0x73
 8003fd2:	dc02      	bgt.n	8003fda <ts_formatstring+0x48>
 8003fd4:	2b69      	cmp	r3, #105	; 0x69
 8003fd6:	d00f      	beq.n	8003ff8 <ts_formatstring+0x66>
 8003fd8:	e056      	b.n	8004088 <ts_formatstring+0xf6>
 8003fda:	2b75      	cmp	r3, #117	; 0x75
 8003fdc:	d037      	beq.n	800404e <ts_formatstring+0xbc>
 8003fde:	2b78      	cmp	r3, #120	; 0x78
 8003fe0:	d040      	beq.n	8004064 <ts_formatstring+0xd2>
 8003fe2:	e051      	b.n	8004088 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	60fa      	str	r2, [r7, #12]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	1d11      	adds	r1, r2, #4
 8003fee:	6079      	str	r1, [r7, #4]
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	b2d2      	uxtb	r2, r2
 8003ff4:	701a      	strb	r2, [r3, #0]
				break;
 8003ff6:	e047      	b.n	8004088 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1d1a      	adds	r2, r3, #4
 8003ffc:	607a      	str	r2, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	2b00      	cmp	r3, #0
 8004006:	da07      	bge.n	8004018 <ts_formatstring+0x86>
					{
						val *= -1;
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	425b      	negs	r3, r3
 800400c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	60fa      	str	r2, [r7, #12]
 8004014:	222d      	movs	r2, #45	; 0x2d
 8004016:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004018:	69f9      	ldr	r1, [r7, #28]
 800401a:	f107 030c 	add.w	r3, r7, #12
 800401e:	220a      	movs	r2, #10
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff6d 	bl	8003f00 <ts_itoa>
				}
				break;
 8004026:	e02f      	b.n	8004088 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	607a      	str	r2, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8004032:	e007      	b.n	8004044 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	60fa      	str	r2, [r7, #12]
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	1c51      	adds	r1, r2, #1
 800403e:	61b9      	str	r1, [r7, #24]
 8004040:	7812      	ldrb	r2, [r2, #0]
 8004042:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1f3      	bne.n	8004034 <ts_formatstring+0xa2>
					}
				}
				break;
 800404c:	e01c      	b.n	8004088 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	1d1a      	adds	r2, r3, #4
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	6819      	ldr	r1, [r3, #0]
 8004056:	f107 030c 	add.w	r3, r7, #12
 800405a:	220a      	movs	r2, #10
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff4f 	bl	8003f00 <ts_itoa>
				break;
 8004062:	e011      	b.n	8004088 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	1d1a      	adds	r2, r3, #4
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4619      	mov	r1, r3
 800406e:	f107 030c 	add.w	r3, r7, #12
 8004072:	2210      	movs	r2, #16
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff ff43 	bl	8003f00 <ts_itoa>
				break;
 800407a:	e005      	b.n	8004088 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	60fa      	str	r2, [r7, #12]
 8004082:	2225      	movs	r2, #37	; 0x25
 8004084:	701a      	strb	r2, [r3, #0]
				  break;
 8004086:	bf00      	nop
			}
			fmt++;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3301      	adds	r3, #1
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	e007      	b.n	80040a0 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	60fa      	str	r2, [r7, #12]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	1c51      	adds	r1, r2, #1
 800409a:	60b9      	str	r1, [r7, #8]
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f47f af7d 	bne.w	8003fa4 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	461a      	mov	r2, r3
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	1ad3      	subs	r3, r2, r3
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
	int length = 0;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 80040ce:	e081      	b.n	80041d4 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b25      	cmp	r3, #37	; 0x25
 80040d6:	d177      	bne.n	80041c8 <ts_formatlength+0x108>
		{
			++fmt;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3301      	adds	r3, #1
 80040dc:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	3b58      	subs	r3, #88	; 0x58
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d86a      	bhi.n	80041be <ts_formatlength+0xfe>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <ts_formatlength+0x30>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	080041b1 	.word	0x080041b1
 80040f4:	080041bf 	.word	0x080041bf
 80040f8:	080041bf 	.word	0x080041bf
 80040fc:	080041bf 	.word	0x080041bf
 8004100:	080041bf 	.word	0x080041bf
 8004104:	080041bf 	.word	0x080041bf
 8004108:	080041bf 	.word	0x080041bf
 800410c:	080041bf 	.word	0x080041bf
 8004110:	080041bf 	.word	0x080041bf
 8004114:	080041bf 	.word	0x080041bf
 8004118:	080041bf 	.word	0x080041bf
 800411c:	08004175 	.word	0x08004175
 8004120:	08004183 	.word	0x08004183
 8004124:	080041bf 	.word	0x080041bf
 8004128:	080041bf 	.word	0x080041bf
 800412c:	080041bf 	.word	0x080041bf
 8004130:	080041bf 	.word	0x080041bf
 8004134:	08004183 	.word	0x08004183
 8004138:	080041bf 	.word	0x080041bf
 800413c:	080041bf 	.word	0x080041bf
 8004140:	080041bf 	.word	0x080041bf
 8004144:	080041bf 	.word	0x080041bf
 8004148:	080041bf 	.word	0x080041bf
 800414c:	080041bf 	.word	0x080041bf
 8004150:	080041bf 	.word	0x080041bf
 8004154:	080041bf 	.word	0x080041bf
 8004158:	080041bf 	.word	0x080041bf
 800415c:	08004191 	.word	0x08004191
 8004160:	080041bf 	.word	0x080041bf
 8004164:	08004183 	.word	0x08004183
 8004168:	080041bf 	.word	0x080041bf
 800416c:	080041bf 	.word	0x080041bf
 8004170:	080041b1 	.word	0x080041b1
			{
			  case 'c':
		  		  va_arg(va, int);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	3304      	adds	r3, #4
 8004178:	603b      	str	r3, [r7, #0]
				  ++length;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3301      	adds	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
				  break;
 8004180:	e025      	b.n	80041ce <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	330b      	adds	r3, #11
 8004186:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	3304      	adds	r3, #4
 800418c:	603b      	str	r3, [r7, #0]
				  break;
 800418e:	e01e      	b.n	80041ce <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	1d1a      	adds	r2, r3, #4
 8004194:	603a      	str	r2, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 800419a:	e002      	b.n	80041a2 <ts_formatlength+0xe2>
			  			  ++length;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3301      	adds	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	60ba      	str	r2, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f6      	bne.n	800419c <ts_formatlength+0xdc>
			  	  }
				  break;
 80041ae:	e00e      	b.n	80041ce <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3308      	adds	r3, #8
 80041b4:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	3304      	adds	r3, #4
 80041ba:	603b      	str	r3, [r7, #0]
				  break;
 80041bc:	e007      	b.n	80041ce <ts_formatlength+0x10e>
			  default:
				  ++length;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3301      	adds	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
				  break;
 80041c4:	bf00      	nop
 80041c6:	e002      	b.n	80041ce <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3301      	adds	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	3301      	adds	r3, #1
 80041d2:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f47f af79 	bne.w	80040d0 <ts_formatlength+0x10>
	}
	return length;
 80041de:	68fb      	ldr	r3, [r7, #12]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 80041ec:	b40f      	push	{r0, r1, r2, r3}
 80041ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
	int length = 0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 80041fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041fe:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004204:	f7ff ff5c 	bl	80040c0 <ts_formatlength>
 8004208:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800420a:	466b      	mov	r3, sp
 800420c:	461e      	mov	r6, r3
		char buf[length];
 800420e:	68f9      	ldr	r1, [r7, #12]
 8004210:	1e4b      	subs	r3, r1, #1
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	460b      	mov	r3, r1
 8004216:	461a      	mov	r2, r3
 8004218:	f04f 0300 	mov.w	r3, #0
 800421c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8004220:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8004224:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8004228:	460b      	mov	r3, r1
 800422a:	461a      	mov	r2, r3
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	00dd      	lsls	r5, r3, #3
 8004232:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004236:	00d4      	lsls	r4, r2, #3
 8004238:	460b      	mov	r3, r1
 800423a:	3307      	adds	r3, #7
 800423c:	08db      	lsrs	r3, r3, #3
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	ebad 0d03 	sub.w	sp, sp, r3
 8004244:	466b      	mov	r3, sp
 8004246:	3300      	adds	r3, #0
 8004248:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 800424a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800424e:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fe9b 	bl	8003f92 <ts_formatstring>
 800425c:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4619      	mov	r1, r3
 8004264:	2001      	movs	r0, #1
 8004266:	f7ff fcff 	bl	8003c68 <_write>
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 800426e:	68fb      	ldr	r3, [r7, #12]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800427a:	b004      	add	sp, #16
 800427c:	4770      	bx	lr
	...

08004280 <_fwrite_r>:
 8004280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004284:	9c08      	ldr	r4, [sp, #32]
 8004286:	4689      	mov	r9, r1
 8004288:	4617      	mov	r7, r2
 800428a:	fb02 f803 	mul.w	r8, r2, r3
 800428e:	4606      	mov	r6, r0
 8004290:	b118      	cbz	r0, 800429a <_fwrite_r+0x1a>
 8004292:	6983      	ldr	r3, [r0, #24]
 8004294:	b90b      	cbnz	r3, 800429a <_fwrite_r+0x1a>
 8004296:	f000 fb61 	bl	800495c <__sinit>
 800429a:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <_fwrite_r+0x90>)
 800429c:	429c      	cmp	r4, r3
 800429e:	d11a      	bne.n	80042d6 <_fwrite_r+0x56>
 80042a0:	6874      	ldr	r4, [r6, #4]
 80042a2:	89a3      	ldrh	r3, [r4, #12]
 80042a4:	071b      	lsls	r3, r3, #28
 80042a6:	d520      	bpl.n	80042ea <_fwrite_r+0x6a>
 80042a8:	6923      	ldr	r3, [r4, #16]
 80042aa:	b1f3      	cbz	r3, 80042ea <_fwrite_r+0x6a>
 80042ac:	2500      	movs	r5, #0
 80042ae:	4545      	cmp	r5, r8
 80042b0:	d029      	beq.n	8004306 <_fwrite_r+0x86>
 80042b2:	68a3      	ldr	r3, [r4, #8]
 80042b4:	f819 1005 	ldrb.w	r1, [r9, r5]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	60a3      	str	r3, [r4, #8]
 80042be:	da04      	bge.n	80042ca <_fwrite_r+0x4a>
 80042c0:	69a2      	ldr	r2, [r4, #24]
 80042c2:	4293      	cmp	r3, r2
 80042c4:	db19      	blt.n	80042fa <_fwrite_r+0x7a>
 80042c6:	290a      	cmp	r1, #10
 80042c8:	d017      	beq.n	80042fa <_fwrite_r+0x7a>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	6022      	str	r2, [r4, #0]
 80042d0:	7019      	strb	r1, [r3, #0]
 80042d2:	3501      	adds	r5, #1
 80042d4:	e7eb      	b.n	80042ae <_fwrite_r+0x2e>
 80042d6:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <_fwrite_r+0x94>)
 80042d8:	429c      	cmp	r4, r3
 80042da:	d101      	bne.n	80042e0 <_fwrite_r+0x60>
 80042dc:	68b4      	ldr	r4, [r6, #8]
 80042de:	e7e0      	b.n	80042a2 <_fwrite_r+0x22>
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <_fwrite_r+0x98>)
 80042e2:	429c      	cmp	r4, r3
 80042e4:	bf08      	it	eq
 80042e6:	68f4      	ldreq	r4, [r6, #12]
 80042e8:	e7db      	b.n	80042a2 <_fwrite_r+0x22>
 80042ea:	4621      	mov	r1, r4
 80042ec:	4630      	mov	r0, r6
 80042ee:	f000 f9d5 	bl	800469c <__swsetup_r>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d0da      	beq.n	80042ac <_fwrite_r+0x2c>
 80042f6:	2500      	movs	r5, #0
 80042f8:	e005      	b.n	8004306 <_fwrite_r+0x86>
 80042fa:	4622      	mov	r2, r4
 80042fc:	4630      	mov	r0, r6
 80042fe:	f000 f97b 	bl	80045f8 <__swbuf_r>
 8004302:	3001      	adds	r0, #1
 8004304:	d1e5      	bne.n	80042d2 <_fwrite_r+0x52>
 8004306:	fbb5 f0f7 	udiv	r0, r5, r7
 800430a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800430e:	bf00      	nop
 8004310:	08004ec0 	.word	0x08004ec0
 8004314:	08004ee0 	.word	0x08004ee0
 8004318:	08004ea0 	.word	0x08004ea0

0800431c <fwrite>:
 800431c:	b507      	push	{r0, r1, r2, lr}
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	460a      	mov	r2, r1
 8004324:	4601      	mov	r1, r0
 8004326:	4803      	ldr	r0, [pc, #12]	; (8004334 <fwrite+0x18>)
 8004328:	6800      	ldr	r0, [r0, #0]
 800432a:	f7ff ffa9 	bl	8004280 <_fwrite_r>
 800432e:	b003      	add	sp, #12
 8004330:	f85d fb04 	ldr.w	pc, [sp], #4
 8004334:	20000018 	.word	0x20000018

08004338 <__libc_init_array>:
 8004338:	b570      	push	{r4, r5, r6, lr}
 800433a:	4e0d      	ldr	r6, [pc, #52]	; (8004370 <__libc_init_array+0x38>)
 800433c:	4c0d      	ldr	r4, [pc, #52]	; (8004374 <__libc_init_array+0x3c>)
 800433e:	1ba4      	subs	r4, r4, r6
 8004340:	10a4      	asrs	r4, r4, #2
 8004342:	2500      	movs	r5, #0
 8004344:	42a5      	cmp	r5, r4
 8004346:	d109      	bne.n	800435c <__libc_init_array+0x24>
 8004348:	4e0b      	ldr	r6, [pc, #44]	; (8004378 <__libc_init_array+0x40>)
 800434a:	4c0c      	ldr	r4, [pc, #48]	; (800437c <__libc_init_array+0x44>)
 800434c:	f000 fdd8 	bl	8004f00 <_init>
 8004350:	1ba4      	subs	r4, r4, r6
 8004352:	10a4      	asrs	r4, r4, #2
 8004354:	2500      	movs	r5, #0
 8004356:	42a5      	cmp	r5, r4
 8004358:	d105      	bne.n	8004366 <__libc_init_array+0x2e>
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004360:	4798      	blx	r3
 8004362:	3501      	adds	r5, #1
 8004364:	e7ee      	b.n	8004344 <__libc_init_array+0xc>
 8004366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800436a:	4798      	blx	r3
 800436c:	3501      	adds	r5, #1
 800436e:	e7f2      	b.n	8004356 <__libc_init_array+0x1e>
 8004370:	08004f18 	.word	0x08004f18
 8004374:	08004f18 	.word	0x08004f18
 8004378:	08004f18 	.word	0x08004f18
 800437c:	08004f1c 	.word	0x08004f1c

08004380 <malloc>:
 8004380:	4b02      	ldr	r3, [pc, #8]	; (800438c <malloc+0xc>)
 8004382:	4601      	mov	r1, r0
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	f000 b865 	b.w	8004454 <_malloc_r>
 800438a:	bf00      	nop
 800438c:	20000018 	.word	0x20000018

08004390 <memcpy>:
 8004390:	b510      	push	{r4, lr}
 8004392:	1e43      	subs	r3, r0, #1
 8004394:	440a      	add	r2, r1
 8004396:	4291      	cmp	r1, r2
 8004398:	d100      	bne.n	800439c <memcpy+0xc>
 800439a:	bd10      	pop	{r4, pc}
 800439c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043a4:	e7f7      	b.n	8004396 <memcpy+0x6>

080043a6 <memset>:
 80043a6:	4402      	add	r2, r0
 80043a8:	4603      	mov	r3, r0
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d100      	bne.n	80043b0 <memset+0xa>
 80043ae:	4770      	bx	lr
 80043b0:	f803 1b01 	strb.w	r1, [r3], #1
 80043b4:	e7f9      	b.n	80043aa <memset+0x4>
	...

080043b8 <_free_r>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	4605      	mov	r5, r0
 80043bc:	2900      	cmp	r1, #0
 80043be:	d045      	beq.n	800444c <_free_r+0x94>
 80043c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043c4:	1f0c      	subs	r4, r1, #4
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	bfb8      	it	lt
 80043ca:	18e4      	addlt	r4, r4, r3
 80043cc:	f000 fbb4 	bl	8004b38 <__malloc_lock>
 80043d0:	4a1f      	ldr	r2, [pc, #124]	; (8004450 <_free_r+0x98>)
 80043d2:	6813      	ldr	r3, [r2, #0]
 80043d4:	4610      	mov	r0, r2
 80043d6:	b933      	cbnz	r3, 80043e6 <_free_r+0x2e>
 80043d8:	6063      	str	r3, [r4, #4]
 80043da:	6014      	str	r4, [r2, #0]
 80043dc:	4628      	mov	r0, r5
 80043de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043e2:	f000 bbaa 	b.w	8004b3a <__malloc_unlock>
 80043e6:	42a3      	cmp	r3, r4
 80043e8:	d90c      	bls.n	8004404 <_free_r+0x4c>
 80043ea:	6821      	ldr	r1, [r4, #0]
 80043ec:	1862      	adds	r2, r4, r1
 80043ee:	4293      	cmp	r3, r2
 80043f0:	bf04      	itt	eq
 80043f2:	681a      	ldreq	r2, [r3, #0]
 80043f4:	685b      	ldreq	r3, [r3, #4]
 80043f6:	6063      	str	r3, [r4, #4]
 80043f8:	bf04      	itt	eq
 80043fa:	1852      	addeq	r2, r2, r1
 80043fc:	6022      	streq	r2, [r4, #0]
 80043fe:	6004      	str	r4, [r0, #0]
 8004400:	e7ec      	b.n	80043dc <_free_r+0x24>
 8004402:	4613      	mov	r3, r2
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	b10a      	cbz	r2, 800440c <_free_r+0x54>
 8004408:	42a2      	cmp	r2, r4
 800440a:	d9fa      	bls.n	8004402 <_free_r+0x4a>
 800440c:	6819      	ldr	r1, [r3, #0]
 800440e:	1858      	adds	r0, r3, r1
 8004410:	42a0      	cmp	r0, r4
 8004412:	d10b      	bne.n	800442c <_free_r+0x74>
 8004414:	6820      	ldr	r0, [r4, #0]
 8004416:	4401      	add	r1, r0
 8004418:	1858      	adds	r0, r3, r1
 800441a:	4282      	cmp	r2, r0
 800441c:	6019      	str	r1, [r3, #0]
 800441e:	d1dd      	bne.n	80043dc <_free_r+0x24>
 8004420:	6810      	ldr	r0, [r2, #0]
 8004422:	6852      	ldr	r2, [r2, #4]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	4401      	add	r1, r0
 8004428:	6019      	str	r1, [r3, #0]
 800442a:	e7d7      	b.n	80043dc <_free_r+0x24>
 800442c:	d902      	bls.n	8004434 <_free_r+0x7c>
 800442e:	230c      	movs	r3, #12
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	e7d3      	b.n	80043dc <_free_r+0x24>
 8004434:	6820      	ldr	r0, [r4, #0]
 8004436:	1821      	adds	r1, r4, r0
 8004438:	428a      	cmp	r2, r1
 800443a:	bf04      	itt	eq
 800443c:	6811      	ldreq	r1, [r2, #0]
 800443e:	6852      	ldreq	r2, [r2, #4]
 8004440:	6062      	str	r2, [r4, #4]
 8004442:	bf04      	itt	eq
 8004444:	1809      	addeq	r1, r1, r0
 8004446:	6021      	streq	r1, [r4, #0]
 8004448:	605c      	str	r4, [r3, #4]
 800444a:	e7c7      	b.n	80043dc <_free_r+0x24>
 800444c:	bd38      	pop	{r3, r4, r5, pc}
 800444e:	bf00      	nop
 8004450:	20007bf0 	.word	0x20007bf0

08004454 <_malloc_r>:
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	1ccd      	adds	r5, r1, #3
 8004458:	f025 0503 	bic.w	r5, r5, #3
 800445c:	3508      	adds	r5, #8
 800445e:	2d0c      	cmp	r5, #12
 8004460:	bf38      	it	cc
 8004462:	250c      	movcc	r5, #12
 8004464:	2d00      	cmp	r5, #0
 8004466:	4606      	mov	r6, r0
 8004468:	db01      	blt.n	800446e <_malloc_r+0x1a>
 800446a:	42a9      	cmp	r1, r5
 800446c:	d903      	bls.n	8004476 <_malloc_r+0x22>
 800446e:	230c      	movs	r3, #12
 8004470:	6033      	str	r3, [r6, #0]
 8004472:	2000      	movs	r0, #0
 8004474:	bd70      	pop	{r4, r5, r6, pc}
 8004476:	f000 fb5f 	bl	8004b38 <__malloc_lock>
 800447a:	4a23      	ldr	r2, [pc, #140]	; (8004508 <_malloc_r+0xb4>)
 800447c:	6814      	ldr	r4, [r2, #0]
 800447e:	4621      	mov	r1, r4
 8004480:	b991      	cbnz	r1, 80044a8 <_malloc_r+0x54>
 8004482:	4c22      	ldr	r4, [pc, #136]	; (800450c <_malloc_r+0xb8>)
 8004484:	6823      	ldr	r3, [r4, #0]
 8004486:	b91b      	cbnz	r3, 8004490 <_malloc_r+0x3c>
 8004488:	4630      	mov	r0, r6
 800448a:	f000 f8a5 	bl	80045d8 <_sbrk_r>
 800448e:	6020      	str	r0, [r4, #0]
 8004490:	4629      	mov	r1, r5
 8004492:	4630      	mov	r0, r6
 8004494:	f000 f8a0 	bl	80045d8 <_sbrk_r>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d126      	bne.n	80044ea <_malloc_r+0x96>
 800449c:	230c      	movs	r3, #12
 800449e:	6033      	str	r3, [r6, #0]
 80044a0:	4630      	mov	r0, r6
 80044a2:	f000 fb4a 	bl	8004b3a <__malloc_unlock>
 80044a6:	e7e4      	b.n	8004472 <_malloc_r+0x1e>
 80044a8:	680b      	ldr	r3, [r1, #0]
 80044aa:	1b5b      	subs	r3, r3, r5
 80044ac:	d41a      	bmi.n	80044e4 <_malloc_r+0x90>
 80044ae:	2b0b      	cmp	r3, #11
 80044b0:	d90f      	bls.n	80044d2 <_malloc_r+0x7e>
 80044b2:	600b      	str	r3, [r1, #0]
 80044b4:	50cd      	str	r5, [r1, r3]
 80044b6:	18cc      	adds	r4, r1, r3
 80044b8:	4630      	mov	r0, r6
 80044ba:	f000 fb3e 	bl	8004b3a <__malloc_unlock>
 80044be:	f104 000b 	add.w	r0, r4, #11
 80044c2:	1d23      	adds	r3, r4, #4
 80044c4:	f020 0007 	bic.w	r0, r0, #7
 80044c8:	1ac3      	subs	r3, r0, r3
 80044ca:	d01b      	beq.n	8004504 <_malloc_r+0xb0>
 80044cc:	425a      	negs	r2, r3
 80044ce:	50e2      	str	r2, [r4, r3]
 80044d0:	bd70      	pop	{r4, r5, r6, pc}
 80044d2:	428c      	cmp	r4, r1
 80044d4:	bf0d      	iteet	eq
 80044d6:	6863      	ldreq	r3, [r4, #4]
 80044d8:	684b      	ldrne	r3, [r1, #4]
 80044da:	6063      	strne	r3, [r4, #4]
 80044dc:	6013      	streq	r3, [r2, #0]
 80044de:	bf18      	it	ne
 80044e0:	460c      	movne	r4, r1
 80044e2:	e7e9      	b.n	80044b8 <_malloc_r+0x64>
 80044e4:	460c      	mov	r4, r1
 80044e6:	6849      	ldr	r1, [r1, #4]
 80044e8:	e7ca      	b.n	8004480 <_malloc_r+0x2c>
 80044ea:	1cc4      	adds	r4, r0, #3
 80044ec:	f024 0403 	bic.w	r4, r4, #3
 80044f0:	42a0      	cmp	r0, r4
 80044f2:	d005      	beq.n	8004500 <_malloc_r+0xac>
 80044f4:	1a21      	subs	r1, r4, r0
 80044f6:	4630      	mov	r0, r6
 80044f8:	f000 f86e 	bl	80045d8 <_sbrk_r>
 80044fc:	3001      	adds	r0, #1
 80044fe:	d0cd      	beq.n	800449c <_malloc_r+0x48>
 8004500:	6025      	str	r5, [r4, #0]
 8004502:	e7d9      	b.n	80044b8 <_malloc_r+0x64>
 8004504:	bd70      	pop	{r4, r5, r6, pc}
 8004506:	bf00      	nop
 8004508:	20007bf0 	.word	0x20007bf0
 800450c:	20007bf4 	.word	0x20007bf4

08004510 <_puts_r>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	460e      	mov	r6, r1
 8004514:	4605      	mov	r5, r0
 8004516:	b118      	cbz	r0, 8004520 <_puts_r+0x10>
 8004518:	6983      	ldr	r3, [r0, #24]
 800451a:	b90b      	cbnz	r3, 8004520 <_puts_r+0x10>
 800451c:	f000 fa1e 	bl	800495c <__sinit>
 8004520:	69ab      	ldr	r3, [r5, #24]
 8004522:	68ac      	ldr	r4, [r5, #8]
 8004524:	b913      	cbnz	r3, 800452c <_puts_r+0x1c>
 8004526:	4628      	mov	r0, r5
 8004528:	f000 fa18 	bl	800495c <__sinit>
 800452c:	4b23      	ldr	r3, [pc, #140]	; (80045bc <_puts_r+0xac>)
 800452e:	429c      	cmp	r4, r3
 8004530:	d117      	bne.n	8004562 <_puts_r+0x52>
 8004532:	686c      	ldr	r4, [r5, #4]
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	071b      	lsls	r3, r3, #28
 8004538:	d51d      	bpl.n	8004576 <_puts_r+0x66>
 800453a:	6923      	ldr	r3, [r4, #16]
 800453c:	b1db      	cbz	r3, 8004576 <_puts_r+0x66>
 800453e:	3e01      	subs	r6, #1
 8004540:	68a3      	ldr	r3, [r4, #8]
 8004542:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004546:	3b01      	subs	r3, #1
 8004548:	60a3      	str	r3, [r4, #8]
 800454a:	b9e9      	cbnz	r1, 8004588 <_puts_r+0x78>
 800454c:	2b00      	cmp	r3, #0
 800454e:	da2e      	bge.n	80045ae <_puts_r+0x9e>
 8004550:	4622      	mov	r2, r4
 8004552:	210a      	movs	r1, #10
 8004554:	4628      	mov	r0, r5
 8004556:	f000 f84f 	bl	80045f8 <__swbuf_r>
 800455a:	3001      	adds	r0, #1
 800455c:	d011      	beq.n	8004582 <_puts_r+0x72>
 800455e:	200a      	movs	r0, #10
 8004560:	bd70      	pop	{r4, r5, r6, pc}
 8004562:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <_puts_r+0xb0>)
 8004564:	429c      	cmp	r4, r3
 8004566:	d101      	bne.n	800456c <_puts_r+0x5c>
 8004568:	68ac      	ldr	r4, [r5, #8]
 800456a:	e7e3      	b.n	8004534 <_puts_r+0x24>
 800456c:	4b15      	ldr	r3, [pc, #84]	; (80045c4 <_puts_r+0xb4>)
 800456e:	429c      	cmp	r4, r3
 8004570:	bf08      	it	eq
 8004572:	68ec      	ldreq	r4, [r5, #12]
 8004574:	e7de      	b.n	8004534 <_puts_r+0x24>
 8004576:	4621      	mov	r1, r4
 8004578:	4628      	mov	r0, r5
 800457a:	f000 f88f 	bl	800469c <__swsetup_r>
 800457e:	2800      	cmp	r0, #0
 8004580:	d0dd      	beq.n	800453e <_puts_r+0x2e>
 8004582:	f04f 30ff 	mov.w	r0, #4294967295
 8004586:	bd70      	pop	{r4, r5, r6, pc}
 8004588:	2b00      	cmp	r3, #0
 800458a:	da04      	bge.n	8004596 <_puts_r+0x86>
 800458c:	69a2      	ldr	r2, [r4, #24]
 800458e:	4293      	cmp	r3, r2
 8004590:	db06      	blt.n	80045a0 <_puts_r+0x90>
 8004592:	290a      	cmp	r1, #10
 8004594:	d004      	beq.n	80045a0 <_puts_r+0x90>
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	6022      	str	r2, [r4, #0]
 800459c:	7019      	strb	r1, [r3, #0]
 800459e:	e7cf      	b.n	8004540 <_puts_r+0x30>
 80045a0:	4622      	mov	r2, r4
 80045a2:	4628      	mov	r0, r5
 80045a4:	f000 f828 	bl	80045f8 <__swbuf_r>
 80045a8:	3001      	adds	r0, #1
 80045aa:	d1c9      	bne.n	8004540 <_puts_r+0x30>
 80045ac:	e7e9      	b.n	8004582 <_puts_r+0x72>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	200a      	movs	r0, #10
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	6022      	str	r2, [r4, #0]
 80045b6:	7018      	strb	r0, [r3, #0]
 80045b8:	bd70      	pop	{r4, r5, r6, pc}
 80045ba:	bf00      	nop
 80045bc:	08004ec0 	.word	0x08004ec0
 80045c0:	08004ee0 	.word	0x08004ee0
 80045c4:	08004ea0 	.word	0x08004ea0

080045c8 <puts>:
 80045c8:	4b02      	ldr	r3, [pc, #8]	; (80045d4 <puts+0xc>)
 80045ca:	4601      	mov	r1, r0
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	f7ff bf9f 	b.w	8004510 <_puts_r>
 80045d2:	bf00      	nop
 80045d4:	20000018 	.word	0x20000018

080045d8 <_sbrk_r>:
 80045d8:	b538      	push	{r3, r4, r5, lr}
 80045da:	4c06      	ldr	r4, [pc, #24]	; (80045f4 <_sbrk_r+0x1c>)
 80045dc:	2300      	movs	r3, #0
 80045de:	4605      	mov	r5, r0
 80045e0:	4608      	mov	r0, r1
 80045e2:	6023      	str	r3, [r4, #0]
 80045e4:	f7ff fb5e 	bl	8003ca4 <_sbrk>
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d102      	bne.n	80045f2 <_sbrk_r+0x1a>
 80045ec:	6823      	ldr	r3, [r4, #0]
 80045ee:	b103      	cbz	r3, 80045f2 <_sbrk_r+0x1a>
 80045f0:	602b      	str	r3, [r5, #0]
 80045f2:	bd38      	pop	{r3, r4, r5, pc}
 80045f4:	20007cc4 	.word	0x20007cc4

080045f8 <__swbuf_r>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	460e      	mov	r6, r1
 80045fc:	4614      	mov	r4, r2
 80045fe:	4605      	mov	r5, r0
 8004600:	b118      	cbz	r0, 800460a <__swbuf_r+0x12>
 8004602:	6983      	ldr	r3, [r0, #24]
 8004604:	b90b      	cbnz	r3, 800460a <__swbuf_r+0x12>
 8004606:	f000 f9a9 	bl	800495c <__sinit>
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <__swbuf_r+0x98>)
 800460c:	429c      	cmp	r4, r3
 800460e:	d12a      	bne.n	8004666 <__swbuf_r+0x6e>
 8004610:	686c      	ldr	r4, [r5, #4]
 8004612:	69a3      	ldr	r3, [r4, #24]
 8004614:	60a3      	str	r3, [r4, #8]
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	071a      	lsls	r2, r3, #28
 800461a:	d52e      	bpl.n	800467a <__swbuf_r+0x82>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	b363      	cbz	r3, 800467a <__swbuf_r+0x82>
 8004620:	6923      	ldr	r3, [r4, #16]
 8004622:	6820      	ldr	r0, [r4, #0]
 8004624:	1ac0      	subs	r0, r0, r3
 8004626:	6963      	ldr	r3, [r4, #20]
 8004628:	b2f6      	uxtb	r6, r6
 800462a:	4298      	cmp	r0, r3
 800462c:	4637      	mov	r7, r6
 800462e:	db04      	blt.n	800463a <__swbuf_r+0x42>
 8004630:	4621      	mov	r1, r4
 8004632:	4628      	mov	r0, r5
 8004634:	f000 f928 	bl	8004888 <_fflush_r>
 8004638:	bb28      	cbnz	r0, 8004686 <__swbuf_r+0x8e>
 800463a:	68a3      	ldr	r3, [r4, #8]
 800463c:	3b01      	subs	r3, #1
 800463e:	60a3      	str	r3, [r4, #8]
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	6022      	str	r2, [r4, #0]
 8004646:	701e      	strb	r6, [r3, #0]
 8004648:	6963      	ldr	r3, [r4, #20]
 800464a:	3001      	adds	r0, #1
 800464c:	4298      	cmp	r0, r3
 800464e:	d004      	beq.n	800465a <__swbuf_r+0x62>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	07db      	lsls	r3, r3, #31
 8004654:	d519      	bpl.n	800468a <__swbuf_r+0x92>
 8004656:	2e0a      	cmp	r6, #10
 8004658:	d117      	bne.n	800468a <__swbuf_r+0x92>
 800465a:	4621      	mov	r1, r4
 800465c:	4628      	mov	r0, r5
 800465e:	f000 f913 	bl	8004888 <_fflush_r>
 8004662:	b190      	cbz	r0, 800468a <__swbuf_r+0x92>
 8004664:	e00f      	b.n	8004686 <__swbuf_r+0x8e>
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <__swbuf_r+0x9c>)
 8004668:	429c      	cmp	r4, r3
 800466a:	d101      	bne.n	8004670 <__swbuf_r+0x78>
 800466c:	68ac      	ldr	r4, [r5, #8]
 800466e:	e7d0      	b.n	8004612 <__swbuf_r+0x1a>
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <__swbuf_r+0xa0>)
 8004672:	429c      	cmp	r4, r3
 8004674:	bf08      	it	eq
 8004676:	68ec      	ldreq	r4, [r5, #12]
 8004678:	e7cb      	b.n	8004612 <__swbuf_r+0x1a>
 800467a:	4621      	mov	r1, r4
 800467c:	4628      	mov	r0, r5
 800467e:	f000 f80d 	bl	800469c <__swsetup_r>
 8004682:	2800      	cmp	r0, #0
 8004684:	d0cc      	beq.n	8004620 <__swbuf_r+0x28>
 8004686:	f04f 37ff 	mov.w	r7, #4294967295
 800468a:	4638      	mov	r0, r7
 800468c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800468e:	bf00      	nop
 8004690:	08004ec0 	.word	0x08004ec0
 8004694:	08004ee0 	.word	0x08004ee0
 8004698:	08004ea0 	.word	0x08004ea0

0800469c <__swsetup_r>:
 800469c:	4b32      	ldr	r3, [pc, #200]	; (8004768 <__swsetup_r+0xcc>)
 800469e:	b570      	push	{r4, r5, r6, lr}
 80046a0:	681d      	ldr	r5, [r3, #0]
 80046a2:	4606      	mov	r6, r0
 80046a4:	460c      	mov	r4, r1
 80046a6:	b125      	cbz	r5, 80046b2 <__swsetup_r+0x16>
 80046a8:	69ab      	ldr	r3, [r5, #24]
 80046aa:	b913      	cbnz	r3, 80046b2 <__swsetup_r+0x16>
 80046ac:	4628      	mov	r0, r5
 80046ae:	f000 f955 	bl	800495c <__sinit>
 80046b2:	4b2e      	ldr	r3, [pc, #184]	; (800476c <__swsetup_r+0xd0>)
 80046b4:	429c      	cmp	r4, r3
 80046b6:	d10f      	bne.n	80046d8 <__swsetup_r+0x3c>
 80046b8:	686c      	ldr	r4, [r5, #4]
 80046ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046be:	b29a      	uxth	r2, r3
 80046c0:	0715      	lsls	r5, r2, #28
 80046c2:	d42c      	bmi.n	800471e <__swsetup_r+0x82>
 80046c4:	06d0      	lsls	r0, r2, #27
 80046c6:	d411      	bmi.n	80046ec <__swsetup_r+0x50>
 80046c8:	2209      	movs	r2, #9
 80046ca:	6032      	str	r2, [r6, #0]
 80046cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	f04f 30ff 	mov.w	r0, #4294967295
 80046d6:	bd70      	pop	{r4, r5, r6, pc}
 80046d8:	4b25      	ldr	r3, [pc, #148]	; (8004770 <__swsetup_r+0xd4>)
 80046da:	429c      	cmp	r4, r3
 80046dc:	d101      	bne.n	80046e2 <__swsetup_r+0x46>
 80046de:	68ac      	ldr	r4, [r5, #8]
 80046e0:	e7eb      	b.n	80046ba <__swsetup_r+0x1e>
 80046e2:	4b24      	ldr	r3, [pc, #144]	; (8004774 <__swsetup_r+0xd8>)
 80046e4:	429c      	cmp	r4, r3
 80046e6:	bf08      	it	eq
 80046e8:	68ec      	ldreq	r4, [r5, #12]
 80046ea:	e7e6      	b.n	80046ba <__swsetup_r+0x1e>
 80046ec:	0751      	lsls	r1, r2, #29
 80046ee:	d512      	bpl.n	8004716 <__swsetup_r+0x7a>
 80046f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046f2:	b141      	cbz	r1, 8004706 <__swsetup_r+0x6a>
 80046f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046f8:	4299      	cmp	r1, r3
 80046fa:	d002      	beq.n	8004702 <__swsetup_r+0x66>
 80046fc:	4630      	mov	r0, r6
 80046fe:	f7ff fe5b 	bl	80043b8 <_free_r>
 8004702:	2300      	movs	r3, #0
 8004704:	6363      	str	r3, [r4, #52]	; 0x34
 8004706:	89a3      	ldrh	r3, [r4, #12]
 8004708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800470c:	81a3      	strh	r3, [r4, #12]
 800470e:	2300      	movs	r3, #0
 8004710:	6063      	str	r3, [r4, #4]
 8004712:	6923      	ldr	r3, [r4, #16]
 8004714:	6023      	str	r3, [r4, #0]
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	f043 0308 	orr.w	r3, r3, #8
 800471c:	81a3      	strh	r3, [r4, #12]
 800471e:	6923      	ldr	r3, [r4, #16]
 8004720:	b94b      	cbnz	r3, 8004736 <__swsetup_r+0x9a>
 8004722:	89a3      	ldrh	r3, [r4, #12]
 8004724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800472c:	d003      	beq.n	8004736 <__swsetup_r+0x9a>
 800472e:	4621      	mov	r1, r4
 8004730:	4630      	mov	r0, r6
 8004732:	f000 f9c1 	bl	8004ab8 <__smakebuf_r>
 8004736:	89a2      	ldrh	r2, [r4, #12]
 8004738:	f012 0301 	ands.w	r3, r2, #1
 800473c:	d00c      	beq.n	8004758 <__swsetup_r+0xbc>
 800473e:	2300      	movs	r3, #0
 8004740:	60a3      	str	r3, [r4, #8]
 8004742:	6963      	ldr	r3, [r4, #20]
 8004744:	425b      	negs	r3, r3
 8004746:	61a3      	str	r3, [r4, #24]
 8004748:	6923      	ldr	r3, [r4, #16]
 800474a:	b953      	cbnz	r3, 8004762 <__swsetup_r+0xc6>
 800474c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004750:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004754:	d1ba      	bne.n	80046cc <__swsetup_r+0x30>
 8004756:	bd70      	pop	{r4, r5, r6, pc}
 8004758:	0792      	lsls	r2, r2, #30
 800475a:	bf58      	it	pl
 800475c:	6963      	ldrpl	r3, [r4, #20]
 800475e:	60a3      	str	r3, [r4, #8]
 8004760:	e7f2      	b.n	8004748 <__swsetup_r+0xac>
 8004762:	2000      	movs	r0, #0
 8004764:	e7f7      	b.n	8004756 <__swsetup_r+0xba>
 8004766:	bf00      	nop
 8004768:	20000018 	.word	0x20000018
 800476c:	08004ec0 	.word	0x08004ec0
 8004770:	08004ee0 	.word	0x08004ee0
 8004774:	08004ea0 	.word	0x08004ea0

08004778 <__sflush_r>:
 8004778:	898a      	ldrh	r2, [r1, #12]
 800477a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477e:	4605      	mov	r5, r0
 8004780:	0710      	lsls	r0, r2, #28
 8004782:	460c      	mov	r4, r1
 8004784:	d45a      	bmi.n	800483c <__sflush_r+0xc4>
 8004786:	684b      	ldr	r3, [r1, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	dc05      	bgt.n	8004798 <__sflush_r+0x20>
 800478c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	dc02      	bgt.n	8004798 <__sflush_r+0x20>
 8004792:	2000      	movs	r0, #0
 8004794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004798:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800479a:	2e00      	cmp	r6, #0
 800479c:	d0f9      	beq.n	8004792 <__sflush_r+0x1a>
 800479e:	2300      	movs	r3, #0
 80047a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047a4:	682f      	ldr	r7, [r5, #0]
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	d033      	beq.n	8004812 <__sflush_r+0x9a>
 80047aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	075a      	lsls	r2, r3, #29
 80047b0:	d505      	bpl.n	80047be <__sflush_r+0x46>
 80047b2:	6863      	ldr	r3, [r4, #4]
 80047b4:	1ac0      	subs	r0, r0, r3
 80047b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047b8:	b10b      	cbz	r3, 80047be <__sflush_r+0x46>
 80047ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047bc:	1ac0      	subs	r0, r0, r3
 80047be:	2300      	movs	r3, #0
 80047c0:	4602      	mov	r2, r0
 80047c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047c4:	6a21      	ldr	r1, [r4, #32]
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b0      	blx	r6
 80047ca:	1c43      	adds	r3, r0, #1
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	d106      	bne.n	80047de <__sflush_r+0x66>
 80047d0:	6829      	ldr	r1, [r5, #0]
 80047d2:	291d      	cmp	r1, #29
 80047d4:	d84b      	bhi.n	800486e <__sflush_r+0xf6>
 80047d6:	4a2b      	ldr	r2, [pc, #172]	; (8004884 <__sflush_r+0x10c>)
 80047d8:	40ca      	lsrs	r2, r1
 80047da:	07d6      	lsls	r6, r2, #31
 80047dc:	d547      	bpl.n	800486e <__sflush_r+0xf6>
 80047de:	2200      	movs	r2, #0
 80047e0:	6062      	str	r2, [r4, #4]
 80047e2:	04d9      	lsls	r1, r3, #19
 80047e4:	6922      	ldr	r2, [r4, #16]
 80047e6:	6022      	str	r2, [r4, #0]
 80047e8:	d504      	bpl.n	80047f4 <__sflush_r+0x7c>
 80047ea:	1c42      	adds	r2, r0, #1
 80047ec:	d101      	bne.n	80047f2 <__sflush_r+0x7a>
 80047ee:	682b      	ldr	r3, [r5, #0]
 80047f0:	b903      	cbnz	r3, 80047f4 <__sflush_r+0x7c>
 80047f2:	6560      	str	r0, [r4, #84]	; 0x54
 80047f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047f6:	602f      	str	r7, [r5, #0]
 80047f8:	2900      	cmp	r1, #0
 80047fa:	d0ca      	beq.n	8004792 <__sflush_r+0x1a>
 80047fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004800:	4299      	cmp	r1, r3
 8004802:	d002      	beq.n	800480a <__sflush_r+0x92>
 8004804:	4628      	mov	r0, r5
 8004806:	f7ff fdd7 	bl	80043b8 <_free_r>
 800480a:	2000      	movs	r0, #0
 800480c:	6360      	str	r0, [r4, #52]	; 0x34
 800480e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004812:	6a21      	ldr	r1, [r4, #32]
 8004814:	2301      	movs	r3, #1
 8004816:	4628      	mov	r0, r5
 8004818:	47b0      	blx	r6
 800481a:	1c41      	adds	r1, r0, #1
 800481c:	d1c6      	bne.n	80047ac <__sflush_r+0x34>
 800481e:	682b      	ldr	r3, [r5, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0c3      	beq.n	80047ac <__sflush_r+0x34>
 8004824:	2b1d      	cmp	r3, #29
 8004826:	d001      	beq.n	800482c <__sflush_r+0xb4>
 8004828:	2b16      	cmp	r3, #22
 800482a:	d101      	bne.n	8004830 <__sflush_r+0xb8>
 800482c:	602f      	str	r7, [r5, #0]
 800482e:	e7b0      	b.n	8004792 <__sflush_r+0x1a>
 8004830:	89a3      	ldrh	r3, [r4, #12]
 8004832:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004836:	81a3      	strh	r3, [r4, #12]
 8004838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800483c:	690f      	ldr	r7, [r1, #16]
 800483e:	2f00      	cmp	r7, #0
 8004840:	d0a7      	beq.n	8004792 <__sflush_r+0x1a>
 8004842:	0793      	lsls	r3, r2, #30
 8004844:	680e      	ldr	r6, [r1, #0]
 8004846:	bf08      	it	eq
 8004848:	694b      	ldreq	r3, [r1, #20]
 800484a:	600f      	str	r7, [r1, #0]
 800484c:	bf18      	it	ne
 800484e:	2300      	movne	r3, #0
 8004850:	eba6 0807 	sub.w	r8, r6, r7
 8004854:	608b      	str	r3, [r1, #8]
 8004856:	f1b8 0f00 	cmp.w	r8, #0
 800485a:	dd9a      	ble.n	8004792 <__sflush_r+0x1a>
 800485c:	4643      	mov	r3, r8
 800485e:	463a      	mov	r2, r7
 8004860:	6a21      	ldr	r1, [r4, #32]
 8004862:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004864:	4628      	mov	r0, r5
 8004866:	47b0      	blx	r6
 8004868:	2800      	cmp	r0, #0
 800486a:	dc07      	bgt.n	800487c <__sflush_r+0x104>
 800486c:	89a3      	ldrh	r3, [r4, #12]
 800486e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004872:	81a3      	strh	r3, [r4, #12]
 8004874:	f04f 30ff 	mov.w	r0, #4294967295
 8004878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800487c:	4407      	add	r7, r0
 800487e:	eba8 0800 	sub.w	r8, r8, r0
 8004882:	e7e8      	b.n	8004856 <__sflush_r+0xde>
 8004884:	20400001 	.word	0x20400001

08004888 <_fflush_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	690b      	ldr	r3, [r1, #16]
 800488c:	4605      	mov	r5, r0
 800488e:	460c      	mov	r4, r1
 8004890:	b1db      	cbz	r3, 80048ca <_fflush_r+0x42>
 8004892:	b118      	cbz	r0, 800489c <_fflush_r+0x14>
 8004894:	6983      	ldr	r3, [r0, #24]
 8004896:	b90b      	cbnz	r3, 800489c <_fflush_r+0x14>
 8004898:	f000 f860 	bl	800495c <__sinit>
 800489c:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <_fflush_r+0x48>)
 800489e:	429c      	cmp	r4, r3
 80048a0:	d109      	bne.n	80048b6 <_fflush_r+0x2e>
 80048a2:	686c      	ldr	r4, [r5, #4]
 80048a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a8:	b17b      	cbz	r3, 80048ca <_fflush_r+0x42>
 80048aa:	4621      	mov	r1, r4
 80048ac:	4628      	mov	r0, r5
 80048ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048b2:	f7ff bf61 	b.w	8004778 <__sflush_r>
 80048b6:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <_fflush_r+0x4c>)
 80048b8:	429c      	cmp	r4, r3
 80048ba:	d101      	bne.n	80048c0 <_fflush_r+0x38>
 80048bc:	68ac      	ldr	r4, [r5, #8]
 80048be:	e7f1      	b.n	80048a4 <_fflush_r+0x1c>
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <_fflush_r+0x50>)
 80048c2:	429c      	cmp	r4, r3
 80048c4:	bf08      	it	eq
 80048c6:	68ec      	ldreq	r4, [r5, #12]
 80048c8:	e7ec      	b.n	80048a4 <_fflush_r+0x1c>
 80048ca:	2000      	movs	r0, #0
 80048cc:	bd38      	pop	{r3, r4, r5, pc}
 80048ce:	bf00      	nop
 80048d0:	08004ec0 	.word	0x08004ec0
 80048d4:	08004ee0 	.word	0x08004ee0
 80048d8:	08004ea0 	.word	0x08004ea0

080048dc <_cleanup_r>:
 80048dc:	4901      	ldr	r1, [pc, #4]	; (80048e4 <_cleanup_r+0x8>)
 80048de:	f000 b8a9 	b.w	8004a34 <_fwalk_reent>
 80048e2:	bf00      	nop
 80048e4:	08004889 	.word	0x08004889

080048e8 <std.isra.0>:
 80048e8:	2300      	movs	r3, #0
 80048ea:	b510      	push	{r4, lr}
 80048ec:	4604      	mov	r4, r0
 80048ee:	6003      	str	r3, [r0, #0]
 80048f0:	6043      	str	r3, [r0, #4]
 80048f2:	6083      	str	r3, [r0, #8]
 80048f4:	8181      	strh	r1, [r0, #12]
 80048f6:	6643      	str	r3, [r0, #100]	; 0x64
 80048f8:	81c2      	strh	r2, [r0, #14]
 80048fa:	6103      	str	r3, [r0, #16]
 80048fc:	6143      	str	r3, [r0, #20]
 80048fe:	6183      	str	r3, [r0, #24]
 8004900:	4619      	mov	r1, r3
 8004902:	2208      	movs	r2, #8
 8004904:	305c      	adds	r0, #92	; 0x5c
 8004906:	f7ff fd4e 	bl	80043a6 <memset>
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <std.isra.0+0x38>)
 800490c:	6263      	str	r3, [r4, #36]	; 0x24
 800490e:	4b05      	ldr	r3, [pc, #20]	; (8004924 <std.isra.0+0x3c>)
 8004910:	62a3      	str	r3, [r4, #40]	; 0x28
 8004912:	4b05      	ldr	r3, [pc, #20]	; (8004928 <std.isra.0+0x40>)
 8004914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <std.isra.0+0x44>)
 8004918:	6224      	str	r4, [r4, #32]
 800491a:	6323      	str	r3, [r4, #48]	; 0x30
 800491c:	bd10      	pop	{r4, pc}
 800491e:	bf00      	nop
 8004920:	08004b3d 	.word	0x08004b3d
 8004924:	08004b5f 	.word	0x08004b5f
 8004928:	08004b97 	.word	0x08004b97
 800492c:	08004bbb 	.word	0x08004bbb

08004930 <__sfmoreglue>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	1e4a      	subs	r2, r1, #1
 8004934:	2568      	movs	r5, #104	; 0x68
 8004936:	4355      	muls	r5, r2
 8004938:	460e      	mov	r6, r1
 800493a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800493e:	f7ff fd89 	bl	8004454 <_malloc_r>
 8004942:	4604      	mov	r4, r0
 8004944:	b140      	cbz	r0, 8004958 <__sfmoreglue+0x28>
 8004946:	2100      	movs	r1, #0
 8004948:	e880 0042 	stmia.w	r0, {r1, r6}
 800494c:	300c      	adds	r0, #12
 800494e:	60a0      	str	r0, [r4, #8]
 8004950:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004954:	f7ff fd27 	bl	80043a6 <memset>
 8004958:	4620      	mov	r0, r4
 800495a:	bd70      	pop	{r4, r5, r6, pc}

0800495c <__sinit>:
 800495c:	6983      	ldr	r3, [r0, #24]
 800495e:	b510      	push	{r4, lr}
 8004960:	4604      	mov	r4, r0
 8004962:	bb33      	cbnz	r3, 80049b2 <__sinit+0x56>
 8004964:	6483      	str	r3, [r0, #72]	; 0x48
 8004966:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004968:	6503      	str	r3, [r0, #80]	; 0x50
 800496a:	4b12      	ldr	r3, [pc, #72]	; (80049b4 <__sinit+0x58>)
 800496c:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <__sinit+0x5c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6282      	str	r2, [r0, #40]	; 0x28
 8004972:	4298      	cmp	r0, r3
 8004974:	bf04      	itt	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	6183      	streq	r3, [r0, #24]
 800497a:	f000 f81f 	bl	80049bc <__sfp>
 800497e:	6060      	str	r0, [r4, #4]
 8004980:	4620      	mov	r0, r4
 8004982:	f000 f81b 	bl	80049bc <__sfp>
 8004986:	60a0      	str	r0, [r4, #8]
 8004988:	4620      	mov	r0, r4
 800498a:	f000 f817 	bl	80049bc <__sfp>
 800498e:	2200      	movs	r2, #0
 8004990:	60e0      	str	r0, [r4, #12]
 8004992:	2104      	movs	r1, #4
 8004994:	6860      	ldr	r0, [r4, #4]
 8004996:	f7ff ffa7 	bl	80048e8 <std.isra.0>
 800499a:	2201      	movs	r2, #1
 800499c:	2109      	movs	r1, #9
 800499e:	68a0      	ldr	r0, [r4, #8]
 80049a0:	f7ff ffa2 	bl	80048e8 <std.isra.0>
 80049a4:	2202      	movs	r2, #2
 80049a6:	2112      	movs	r1, #18
 80049a8:	68e0      	ldr	r0, [r4, #12]
 80049aa:	f7ff ff9d 	bl	80048e8 <std.isra.0>
 80049ae:	2301      	movs	r3, #1
 80049b0:	61a3      	str	r3, [r4, #24]
 80049b2:	bd10      	pop	{r4, pc}
 80049b4:	08004e9c 	.word	0x08004e9c
 80049b8:	080048dd 	.word	0x080048dd

080049bc <__sfp>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <__sfp+0x74>)
 80049c0:	681e      	ldr	r6, [r3, #0]
 80049c2:	69b3      	ldr	r3, [r6, #24]
 80049c4:	4607      	mov	r7, r0
 80049c6:	b913      	cbnz	r3, 80049ce <__sfp+0x12>
 80049c8:	4630      	mov	r0, r6
 80049ca:	f7ff ffc7 	bl	800495c <__sinit>
 80049ce:	3648      	adds	r6, #72	; 0x48
 80049d0:	68b4      	ldr	r4, [r6, #8]
 80049d2:	6873      	ldr	r3, [r6, #4]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	d503      	bpl.n	80049e0 <__sfp+0x24>
 80049d8:	6833      	ldr	r3, [r6, #0]
 80049da:	b133      	cbz	r3, 80049ea <__sfp+0x2e>
 80049dc:	6836      	ldr	r6, [r6, #0]
 80049de:	e7f7      	b.n	80049d0 <__sfp+0x14>
 80049e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049e4:	b16d      	cbz	r5, 8004a02 <__sfp+0x46>
 80049e6:	3468      	adds	r4, #104	; 0x68
 80049e8:	e7f4      	b.n	80049d4 <__sfp+0x18>
 80049ea:	2104      	movs	r1, #4
 80049ec:	4638      	mov	r0, r7
 80049ee:	f7ff ff9f 	bl	8004930 <__sfmoreglue>
 80049f2:	6030      	str	r0, [r6, #0]
 80049f4:	2800      	cmp	r0, #0
 80049f6:	d1f1      	bne.n	80049dc <__sfp+0x20>
 80049f8:	230c      	movs	r3, #12
 80049fa:	603b      	str	r3, [r7, #0]
 80049fc:	4604      	mov	r4, r0
 80049fe:	4620      	mov	r0, r4
 8004a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a06:	81e3      	strh	r3, [r4, #14]
 8004a08:	2301      	movs	r3, #1
 8004a0a:	81a3      	strh	r3, [r4, #12]
 8004a0c:	6665      	str	r5, [r4, #100]	; 0x64
 8004a0e:	6025      	str	r5, [r4, #0]
 8004a10:	60a5      	str	r5, [r4, #8]
 8004a12:	6065      	str	r5, [r4, #4]
 8004a14:	6125      	str	r5, [r4, #16]
 8004a16:	6165      	str	r5, [r4, #20]
 8004a18:	61a5      	str	r5, [r4, #24]
 8004a1a:	2208      	movs	r2, #8
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a22:	f7ff fcc0 	bl	80043a6 <memset>
 8004a26:	6365      	str	r5, [r4, #52]	; 0x34
 8004a28:	63a5      	str	r5, [r4, #56]	; 0x38
 8004a2a:	64a5      	str	r5, [r4, #72]	; 0x48
 8004a2c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004a2e:	e7e6      	b.n	80049fe <__sfp+0x42>
 8004a30:	08004e9c 	.word	0x08004e9c

08004a34 <_fwalk_reent>:
 8004a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a38:	4680      	mov	r8, r0
 8004a3a:	4689      	mov	r9, r1
 8004a3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a40:	2600      	movs	r6, #0
 8004a42:	b914      	cbnz	r4, 8004a4a <_fwalk_reent+0x16>
 8004a44:	4630      	mov	r0, r6
 8004a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a4a:	68a5      	ldr	r5, [r4, #8]
 8004a4c:	6867      	ldr	r7, [r4, #4]
 8004a4e:	3f01      	subs	r7, #1
 8004a50:	d501      	bpl.n	8004a56 <_fwalk_reent+0x22>
 8004a52:	6824      	ldr	r4, [r4, #0]
 8004a54:	e7f5      	b.n	8004a42 <_fwalk_reent+0xe>
 8004a56:	89ab      	ldrh	r3, [r5, #12]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d907      	bls.n	8004a6c <_fwalk_reent+0x38>
 8004a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a60:	3301      	adds	r3, #1
 8004a62:	d003      	beq.n	8004a6c <_fwalk_reent+0x38>
 8004a64:	4629      	mov	r1, r5
 8004a66:	4640      	mov	r0, r8
 8004a68:	47c8      	blx	r9
 8004a6a:	4306      	orrs	r6, r0
 8004a6c:	3568      	adds	r5, #104	; 0x68
 8004a6e:	e7ee      	b.n	8004a4e <_fwalk_reent+0x1a>

08004a70 <__swhatbuf_r>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	460e      	mov	r6, r1
 8004a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	b090      	sub	sp, #64	; 0x40
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	461d      	mov	r5, r3
 8004a80:	da07      	bge.n	8004a92 <__swhatbuf_r+0x22>
 8004a82:	2300      	movs	r3, #0
 8004a84:	602b      	str	r3, [r5, #0]
 8004a86:	89b3      	ldrh	r3, [r6, #12]
 8004a88:	061a      	lsls	r2, r3, #24
 8004a8a:	d410      	bmi.n	8004aae <__swhatbuf_r+0x3e>
 8004a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a90:	e00e      	b.n	8004ab0 <__swhatbuf_r+0x40>
 8004a92:	aa01      	add	r2, sp, #4
 8004a94:	f000 f8b8 	bl	8004c08 <_fstat_r>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	dbf2      	blt.n	8004a82 <__swhatbuf_r+0x12>
 8004a9c:	9a02      	ldr	r2, [sp, #8]
 8004a9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004aa2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004aa6:	425a      	negs	r2, r3
 8004aa8:	415a      	adcs	r2, r3
 8004aaa:	602a      	str	r2, [r5, #0]
 8004aac:	e7ee      	b.n	8004a8c <__swhatbuf_r+0x1c>
 8004aae:	2340      	movs	r3, #64	; 0x40
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	6023      	str	r3, [r4, #0]
 8004ab4:	b010      	add	sp, #64	; 0x40
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}

08004ab8 <__smakebuf_r>:
 8004ab8:	898b      	ldrh	r3, [r1, #12]
 8004aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004abc:	079d      	lsls	r5, r3, #30
 8004abe:	4606      	mov	r6, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	d507      	bpl.n	8004ad4 <__smakebuf_r+0x1c>
 8004ac4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	2301      	movs	r3, #1
 8004ace:	6163      	str	r3, [r4, #20]
 8004ad0:	b002      	add	sp, #8
 8004ad2:	bd70      	pop	{r4, r5, r6, pc}
 8004ad4:	ab01      	add	r3, sp, #4
 8004ad6:	466a      	mov	r2, sp
 8004ad8:	f7ff ffca 	bl	8004a70 <__swhatbuf_r>
 8004adc:	9900      	ldr	r1, [sp, #0]
 8004ade:	4605      	mov	r5, r0
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f7ff fcb7 	bl	8004454 <_malloc_r>
 8004ae6:	b948      	cbnz	r0, 8004afc <__smakebuf_r+0x44>
 8004ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aec:	059a      	lsls	r2, r3, #22
 8004aee:	d4ef      	bmi.n	8004ad0 <__smakebuf_r+0x18>
 8004af0:	f023 0303 	bic.w	r3, r3, #3
 8004af4:	f043 0302 	orr.w	r3, r3, #2
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	e7e3      	b.n	8004ac4 <__smakebuf_r+0xc>
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <__smakebuf_r+0x7c>)
 8004afe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b00:	89a3      	ldrh	r3, [r4, #12]
 8004b02:	6020      	str	r0, [r4, #0]
 8004b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b08:	81a3      	strh	r3, [r4, #12]
 8004b0a:	9b00      	ldr	r3, [sp, #0]
 8004b0c:	6163      	str	r3, [r4, #20]
 8004b0e:	9b01      	ldr	r3, [sp, #4]
 8004b10:	6120      	str	r0, [r4, #16]
 8004b12:	b15b      	cbz	r3, 8004b2c <__smakebuf_r+0x74>
 8004b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b18:	4630      	mov	r0, r6
 8004b1a:	f000 f887 	bl	8004c2c <_isatty_r>
 8004b1e:	b128      	cbz	r0, 8004b2c <__smakebuf_r+0x74>
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	f023 0303 	bic.w	r3, r3, #3
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	81a3      	strh	r3, [r4, #12]
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	431d      	orrs	r5, r3
 8004b30:	81a5      	strh	r5, [r4, #12]
 8004b32:	e7cd      	b.n	8004ad0 <__smakebuf_r+0x18>
 8004b34:	080048dd 	.word	0x080048dd

08004b38 <__malloc_lock>:
 8004b38:	4770      	bx	lr

08004b3a <__malloc_unlock>:
 8004b3a:	4770      	bx	lr

08004b3c <__sread>:
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	460c      	mov	r4, r1
 8004b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b44:	f000 f894 	bl	8004c70 <_read_r>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	bfab      	itete	ge
 8004b4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b50:	181b      	addge	r3, r3, r0
 8004b52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b56:	bfac      	ite	ge
 8004b58:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b5a:	81a3      	strhlt	r3, [r4, #12]
 8004b5c:	bd10      	pop	{r4, pc}

08004b5e <__swrite>:
 8004b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b62:	461f      	mov	r7, r3
 8004b64:	898b      	ldrh	r3, [r1, #12]
 8004b66:	05db      	lsls	r3, r3, #23
 8004b68:	4605      	mov	r5, r0
 8004b6a:	460c      	mov	r4, r1
 8004b6c:	4616      	mov	r6, r2
 8004b6e:	d505      	bpl.n	8004b7c <__swrite+0x1e>
 8004b70:	2302      	movs	r3, #2
 8004b72:	2200      	movs	r2, #0
 8004b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b78:	f000 f868 	bl	8004c4c <_lseek_r>
 8004b7c:	89a3      	ldrh	r3, [r4, #12]
 8004b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b86:	81a3      	strh	r3, [r4, #12]
 8004b88:	4632      	mov	r2, r6
 8004b8a:	463b      	mov	r3, r7
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b92:	f000 b817 	b.w	8004bc4 <_write_r>

08004b96 <__sseek>:
 8004b96:	b510      	push	{r4, lr}
 8004b98:	460c      	mov	r4, r1
 8004b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9e:	f000 f855 	bl	8004c4c <_lseek_r>
 8004ba2:	1c43      	adds	r3, r0, #1
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	bf15      	itete	ne
 8004ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bb2:	81a3      	strheq	r3, [r4, #12]
 8004bb4:	bf18      	it	ne
 8004bb6:	81a3      	strhne	r3, [r4, #12]
 8004bb8:	bd10      	pop	{r4, pc}

08004bba <__sclose>:
 8004bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bbe:	f000 b813 	b.w	8004be8 <_close_r>
	...

08004bc4 <_write_r>:
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4c07      	ldr	r4, [pc, #28]	; (8004be4 <_write_r+0x20>)
 8004bc8:	4605      	mov	r5, r0
 8004bca:	4608      	mov	r0, r1
 8004bcc:	4611      	mov	r1, r2
 8004bce:	2200      	movs	r2, #0
 8004bd0:	6022      	str	r2, [r4, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f7ff f848 	bl	8003c68 <_write>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d102      	bne.n	8004be2 <_write_r+0x1e>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	b103      	cbz	r3, 8004be2 <_write_r+0x1e>
 8004be0:	602b      	str	r3, [r5, #0]
 8004be2:	bd38      	pop	{r3, r4, r5, pc}
 8004be4:	20007cc4 	.word	0x20007cc4

08004be8 <_close_r>:
 8004be8:	b538      	push	{r3, r4, r5, lr}
 8004bea:	4c06      	ldr	r4, [pc, #24]	; (8004c04 <_close_r+0x1c>)
 8004bec:	2300      	movs	r3, #0
 8004bee:	4605      	mov	r5, r0
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	6023      	str	r3, [r4, #0]
 8004bf4:	f7ff f876 	bl	8003ce4 <_close>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d102      	bne.n	8004c02 <_close_r+0x1a>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	b103      	cbz	r3, 8004c02 <_close_r+0x1a>
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	20007cc4 	.word	0x20007cc4

08004c08 <_fstat_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4c07      	ldr	r4, [pc, #28]	; (8004c28 <_fstat_r+0x20>)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4605      	mov	r5, r0
 8004c10:	4608      	mov	r0, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	f7ff f877 	bl	8003d08 <_fstat>
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d102      	bne.n	8004c24 <_fstat_r+0x1c>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	b103      	cbz	r3, 8004c24 <_fstat_r+0x1c>
 8004c22:	602b      	str	r3, [r5, #0]
 8004c24:	bd38      	pop	{r3, r4, r5, pc}
 8004c26:	bf00      	nop
 8004c28:	20007cc4 	.word	0x20007cc4

08004c2c <_isatty_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4c06      	ldr	r4, [pc, #24]	; (8004c48 <_isatty_r+0x1c>)
 8004c30:	2300      	movs	r3, #0
 8004c32:	4605      	mov	r5, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	f7ff f878 	bl	8003d2c <_isatty>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_isatty_r+0x1a>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_isatty_r+0x1a>
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	20007cc4 	.word	0x20007cc4

08004c4c <_lseek_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4c07      	ldr	r4, [pc, #28]	; (8004c6c <_lseek_r+0x20>)
 8004c50:	4605      	mov	r5, r0
 8004c52:	4608      	mov	r0, r1
 8004c54:	4611      	mov	r1, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7ff f876 	bl	8003d4c <_lseek>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_lseek_r+0x1e>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_lseek_r+0x1e>
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	20007cc4 	.word	0x20007cc4

08004c70 <_read_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	4c07      	ldr	r4, [pc, #28]	; (8004c90 <_read_r+0x20>)
 8004c74:	4605      	mov	r5, r0
 8004c76:	4608      	mov	r0, r1
 8004c78:	4611      	mov	r1, r2
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	6022      	str	r2, [r4, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f7ff f878 	bl	8003d74 <_read>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <_read_r+0x1e>
 8004c88:	6823      	ldr	r3, [r4, #0]
 8004c8a:	b103      	cbz	r3, 8004c8e <_read_r+0x1e>
 8004c8c:	602b      	str	r3, [r5, #0]
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
 8004c90:	20007cc4 	.word	0x20007cc4
 8004c94:	454c4449 	.word	0x454c4449
 8004c98:	00000000 	.word	0x00000000
 8004c9c:	20726d54 	.word	0x20726d54
 8004ca0:	00637653 	.word	0x00637653
 8004ca4:	51726d54 	.word	0x51726d54
 8004ca8:	00000000 	.word	0x00000000
 8004cac:	74696e49 	.word	0x74696e49
 8004cb0:	696c6169 	.word	0x696c6169
 8004cb4:	676e697a 	.word	0x676e697a
 8004cb8:	65755120 	.word	0x65755120
 8004cbc:	66206575 	.word	0x66206575
 8004cc0:	6720726f 	.word	0x6720726f
 8004cc4:	72656e65 	.word	0x72656e65
 8004cc8:	726f7461 	.word	0x726f7461
 8004ccc:	646e6120 	.word	0x646e6120
 8004cd0:	68637320 	.word	0x68637320
 8004cd4:	6c756465 	.word	0x6c756465
 8004cd8:	203a7265 	.word	0x203a7265
 8004cdc:	72617453 	.word	0x72617453
 8004ce0:	676e6974 	.word	0x676e6974
 8004ce4:	00000000 	.word	0x00000000
 8004ce8:	65686353 	.word	0x65686353
 8004cec:	656c7564 	.word	0x656c7564
 8004cf0:	75512072 	.word	0x75512072
 8004cf4:	00657565 	.word	0x00657565
 8004cf8:	74696e49 	.word	0x74696e49
 8004cfc:	696c6169 	.word	0x696c6169
 8004d00:	676e697a 	.word	0x676e697a
 8004d04:	65755120 	.word	0x65755120
 8004d08:	66206575 	.word	0x66206575
 8004d0c:	6720726f 	.word	0x6720726f
 8004d10:	72656e65 	.word	0x72656e65
 8004d14:	726f7461 	.word	0x726f7461
 8004d18:	646e6120 	.word	0x646e6120
 8004d1c:	68637320 	.word	0x68637320
 8004d20:	6c756465 	.word	0x6c756465
 8004d24:	203a7265 	.word	0x203a7265
 8004d28:	656e6f44 	.word	0x656e6f44
 8004d2c:	00000000 	.word	0x00000000
 8004d30:	6c756f43 	.word	0x6c756f43
 8004d34:	74276e64 	.word	0x74276e64
 8004d38:	6e657320 	.word	0x6e657320
 8004d3c:	656d2064 	.word	0x656d2064
 8004d40:	67617373 	.word	0x67617373
 8004d44:	00002165 	.word	0x00002165
 8004d48:	6b736154 	.word	0x6b736154
 8004d4c:	20642520 	.word	0x20642520
 8004d50:	20736177 	.word	0x20736177
 8004d54:	7265766f 	.word	0x7265766f
 8004d58:	2c657564 	.word	0x2c657564
 8004d5c:	6d657220 	.word	0x6d657220
 8004d60:	6e69766f 	.word	0x6e69766f
 8004d64:	74692067 	.word	0x74692067
 8004d68:	6f726620 	.word	0x6f726620
 8004d6c:	7270206d 	.word	0x7270206d
 8004d70:	7365636f 	.word	0x7365636f
 8004d74:	676e6973 	.word	0x676e6973
 8004d78:	0000000a 	.word	0x0000000a
 8004d7c:	53206425 	.word	0x53206425
 8004d80:	64656863 	.word	0x64656863
 8004d84:	72656c75 	.word	0x72656c75
 8004d88:	6552203a 	.word	0x6552203a
 8004d8c:	76696563 	.word	0x76696563
 8004d90:	61206465 	.word	0x61206465
 8004d94:	73656d20 	.word	0x73656d20
 8004d98:	65676173 	.word	0x65676173
 8004d9c:	00000000 	.word	0x00000000
 8004da0:	206f7420 	.word	0x206f7420
 8004da4:	656c6572 	.word	0x656c6572
 8004da8:	20657361 	.word	0x20657361
 8004dac:	6b736174 	.word	0x6b736174
 8004db0:	74697720 	.word	0x74697720
 8004db4:	64692068 	.word	0x64692068
 8004db8:	0a642520 	.word	0x0a642520
 8004dbc:	00000000 	.word	0x00000000
 8004dc0:	206f7420 	.word	0x206f7420
 8004dc4:	706d6f63 	.word	0x706d6f63
 8004dc8:	6574656c 	.word	0x6574656c
 8004dcc:	74206120 	.word	0x74206120
 8004dd0:	206b7361 	.word	0x206b7361
 8004dd4:	68746977 	.word	0x68746977
 8004dd8:	20646920 	.word	0x20646920
 8004ddc:	203a6425 	.word	0x203a6425
 8004de0:	6b6f6f74 	.word	0x6b6f6f74
 8004de4:	0a642520 	.word	0x0a642520
 8004de8:	00000000 	.word	0x00000000
 8004dec:	61766e49 	.word	0x61766e49
 8004df0:	2064696c 	.word	0x2064696c
 8004df4:	7373656d 	.word	0x7373656d
 8004df8:	20656761 	.word	0x20656761
 8004dfc:	65707974 	.word	0x65707974
 8004e00:	0000000a 	.word	0x0000000a
 8004e04:	6b736174 	.word	0x6b736174
 8004e08:	0000315f 	.word	0x0000315f
 8004e0c:	6b736174 	.word	0x6b736174
 8004e10:	0000325f 	.word	0x0000325f
 8004e14:	6b736174 	.word	0x6b736174
 8004e18:	0000335f 	.word	0x0000335f
 8004e1c:	6b736154 	.word	0x6b736154
 8004e20:	746f6e20 	.word	0x746f6e20
 8004e24:	756f6620 	.word	0x756f6620
 8004e28:	6920646e 	.word	0x6920646e
 8004e2c:	6361206e 	.word	0x6361206e
 8004e30:	65766974 	.word	0x65766974
 8004e34:	73617420 	.word	0x73617420
 8004e38:	696c206b 	.word	0x696c206b
 8004e3c:	00007473 	.word	0x00007473
 8004e40:	6b736154 	.word	0x6b736154
 8004e44:	3a444920 	.word	0x3a444920
 8004e48:	756c2520 	.word	0x756c2520
 8004e4c:	6241202c 	.word	0x6241202c
 8004e50:	756c6f73 	.word	0x756c6f73
 8004e54:	44206574 	.word	0x44206574
 8004e58:	6c646165 	.word	0x6c646165
 8004e5c:	3a656e69 	.word	0x3a656e69
 8004e60:	756c2520 	.word	0x756c2520
 8004e64:	0000000a 	.word	0x0000000a
 8004e68:	65686353 	.word	0x65686353
 8004e6c:	656c7564 	.word	0x656c7564
 8004e70:	61545f72 	.word	0x61545f72
 8004e74:	00006b73 	.word	0x00006b73
 8004e78:	656e6547 	.word	0x656e6547
 8004e7c:	6f746172 	.word	0x6f746172
 8004e80:	00003172 	.word	0x00003172
 8004e84:	656e6547 	.word	0x656e6547
 8004e88:	6f746172 	.word	0x6f746172
 8004e8c:	00003272 	.word	0x00003272
 8004e90:	656e6547 	.word	0x656e6547
 8004e94:	6f746172 	.word	0x6f746172
 8004e98:	00003372 	.word	0x00003372

08004e9c <_global_impure_ptr>:
 8004e9c:	2000001c                                ... 

08004ea0 <__sf_fake_stderr>:
	...

08004ec0 <__sf_fake_stdin>:
	...

08004ee0 <__sf_fake_stdout>:
	...

08004f00 <_init>:
 8004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f02:	bf00      	nop
 8004f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f06:	bc08      	pop	{r3}
 8004f08:	469e      	mov	lr, r3
 8004f0a:	4770      	bx	lr

08004f0c <_fini>:
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	bf00      	nop
 8004f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f12:	bc08      	pop	{r3}
 8004f14:	469e      	mov	lr, r3
 8004f16:	4770      	bx	lr
